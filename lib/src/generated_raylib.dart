// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class RayLibNative {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RayLibNative(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RayLibNative.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void InitWindow(
    int width,
    int height,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _InitWindow(
      width,
      height,
      title,
    );
  }

  late final _InitWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('InitWindow');
  late final _InitWindow = _InitWindowPtr.asFunction<
      void Function(int, int, ffi.Pointer<ffi.Char>)>();

  void CloseWindow() {
    return _CloseWindow();
  }

  late final _CloseWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CloseWindow');
  late final _CloseWindow = _CloseWindowPtr.asFunction<void Function()>();

  bool WindowShouldClose() {
    return _WindowShouldClose();
  }

  late final _WindowShouldClosePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('WindowShouldClose');
  late final _WindowShouldClose =
      _WindowShouldClosePtr.asFunction<bool Function()>();

  bool IsWindowReady() {
    return _IsWindowReady();
  }

  late final _IsWindowReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowReady');
  late final _IsWindowReady = _IsWindowReadyPtr.asFunction<bool Function()>();

  bool IsWindowFullscreen() {
    return _IsWindowFullscreen();
  }

  late final _IsWindowFullscreenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowFullscreen');
  late final _IsWindowFullscreen =
      _IsWindowFullscreenPtr.asFunction<bool Function()>();

  bool IsWindowHidden() {
    return _IsWindowHidden();
  }

  late final _IsWindowHiddenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowHidden');
  late final _IsWindowHidden = _IsWindowHiddenPtr.asFunction<bool Function()>();

  bool IsWindowMinimized() {
    return _IsWindowMinimized();
  }

  late final _IsWindowMinimizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowMinimized');
  late final _IsWindowMinimized =
      _IsWindowMinimizedPtr.asFunction<bool Function()>();

  bool IsWindowMaximized() {
    return _IsWindowMaximized();
  }

  late final _IsWindowMaximizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowMaximized');
  late final _IsWindowMaximized =
      _IsWindowMaximizedPtr.asFunction<bool Function()>();

  bool IsWindowFocused() {
    return _IsWindowFocused();
  }

  late final _IsWindowFocusedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowFocused');
  late final _IsWindowFocused =
      _IsWindowFocusedPtr.asFunction<bool Function()>();

  bool IsWindowResized() {
    return _IsWindowResized();
  }

  late final _IsWindowResizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowResized');
  late final _IsWindowResized =
      _IsWindowResizedPtr.asFunction<bool Function()>();

  bool IsWindowState(
    int flag,
  ) {
    return _IsWindowState(
      flag,
    );
  }

  late final _IsWindowStatePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'IsWindowState');
  late final _IsWindowState =
      _IsWindowStatePtr.asFunction<bool Function(int)>();

  void SetWindowState(
    int flags,
  ) {
    return _SetWindowState(
      flags,
    );
  }

  late final _SetWindowStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetWindowState');
  late final _SetWindowState =
      _SetWindowStatePtr.asFunction<void Function(int)>();

  void ClearWindowState(
    int flags,
  ) {
    return _ClearWindowState(
      flags,
    );
  }

  late final _ClearWindowStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'ClearWindowState');
  late final _ClearWindowState =
      _ClearWindowStatePtr.asFunction<void Function(int)>();

  void ToggleFullscreen() {
    return _ToggleFullscreen();
  }

  late final _ToggleFullscreenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ToggleFullscreen');
  late final _ToggleFullscreen =
      _ToggleFullscreenPtr.asFunction<void Function()>();

  void ToggleBorderlessWindowed() {
    return _ToggleBorderlessWindowed();
  }

  late final _ToggleBorderlessWindowedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ToggleBorderlessWindowed');
  late final _ToggleBorderlessWindowed =
      _ToggleBorderlessWindowedPtr.asFunction<void Function()>();

  void MaximizeWindow() {
    return _MaximizeWindow();
  }

  late final _MaximizeWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('MaximizeWindow');
  late final _MaximizeWindow = _MaximizeWindowPtr.asFunction<void Function()>();

  void MinimizeWindow() {
    return _MinimizeWindow();
  }

  late final _MinimizeWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('MinimizeWindow');
  late final _MinimizeWindow = _MinimizeWindowPtr.asFunction<void Function()>();

  void RestoreWindow() {
    return _RestoreWindow();
  }

  late final _RestoreWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('RestoreWindow');
  late final _RestoreWindow = _RestoreWindowPtr.asFunction<void Function()>();

  void SetWindowIcon(
    Image image,
  ) {
    return _SetWindowIcon(
      image,
    );
  }

  late final _SetWindowIconPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Image)>>('SetWindowIcon');
  late final _SetWindowIcon =
      _SetWindowIconPtr.asFunction<void Function(Image)>();

  void SetWindowIcons(
    ffi.Pointer<Image> images,
    int count,
  ) {
    return _SetWindowIcons(
      images,
      count,
    );
  }

  late final _SetWindowIconsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int)>>(
      'SetWindowIcons');
  late final _SetWindowIcons =
      _SetWindowIconsPtr.asFunction<void Function(ffi.Pointer<Image>, int)>();

  void SetWindowTitle(
    ffi.Pointer<ffi.Char> title,
  ) {
    return _SetWindowTitle(
      title,
    );
  }

  late final _SetWindowTitlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'SetWindowTitle');
  late final _SetWindowTitle =
      _SetWindowTitlePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void SetWindowPosition(
    int x,
    int y,
  ) {
    return _SetWindowPosition(
      x,
      y,
    );
  }

  late final _SetWindowPositionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowPosition');
  late final _SetWindowPosition =
      _SetWindowPositionPtr.asFunction<void Function(int, int)>();

  void SetWindowMonitor(
    int monitor,
  ) {
    return _SetWindowMonitor(
      monitor,
    );
  }

  late final _SetWindowMonitorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetWindowMonitor');
  late final _SetWindowMonitor =
      _SetWindowMonitorPtr.asFunction<void Function(int)>();

  void SetWindowMinSize(
    int width,
    int height,
  ) {
    return _SetWindowMinSize(
      width,
      height,
    );
  }

  late final _SetWindowMinSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowMinSize');
  late final _SetWindowMinSize =
      _SetWindowMinSizePtr.asFunction<void Function(int, int)>();

  void SetWindowMaxSize(
    int width,
    int height,
  ) {
    return _SetWindowMaxSize(
      width,
      height,
    );
  }

  late final _SetWindowMaxSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowMaxSize');
  late final _SetWindowMaxSize =
      _SetWindowMaxSizePtr.asFunction<void Function(int, int)>();

  void SetWindowSize(
    int width,
    int height,
  ) {
    return _SetWindowSize(
      width,
      height,
    );
  }

  late final _SetWindowSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowSize');
  late final _SetWindowSize =
      _SetWindowSizePtr.asFunction<void Function(int, int)>();

  void SetWindowOpacity(
    double opacity,
  ) {
    return _SetWindowOpacity(
      opacity,
    );
  }

  late final _SetWindowOpacityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'SetWindowOpacity');
  late final _SetWindowOpacity =
      _SetWindowOpacityPtr.asFunction<void Function(double)>();

  void SetWindowFocused() {
    return _SetWindowFocused();
  }

  late final _SetWindowFocusedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SetWindowFocused');
  late final _SetWindowFocused =
      _SetWindowFocusedPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> GetWindowHandle() {
    return _GetWindowHandle();
  }

  late final _GetWindowHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'GetWindowHandle');
  late final _GetWindowHandle =
      _GetWindowHandlePtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  int GetScreenWidth() {
    return _GetScreenWidth();
  }

  late final _GetScreenWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetScreenWidth');
  late final _GetScreenWidth = _GetScreenWidthPtr.asFunction<int Function()>();

  int GetScreenHeight() {
    return _GetScreenHeight();
  }

  late final _GetScreenHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetScreenHeight');
  late final _GetScreenHeight =
      _GetScreenHeightPtr.asFunction<int Function()>();

  int GetRenderWidth() {
    return _GetRenderWidth();
  }

  late final _GetRenderWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetRenderWidth');
  late final _GetRenderWidth = _GetRenderWidthPtr.asFunction<int Function()>();

  int GetRenderHeight() {
    return _GetRenderHeight();
  }

  late final _GetRenderHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetRenderHeight');
  late final _GetRenderHeight =
      _GetRenderHeightPtr.asFunction<int Function()>();

  int GetMonitorCount() {
    return _GetMonitorCount();
  }

  late final _GetMonitorCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetMonitorCount');
  late final _GetMonitorCount =
      _GetMonitorCountPtr.asFunction<int Function()>();

  int GetCurrentMonitor() {
    return _GetCurrentMonitor();
  }

  late final _GetCurrentMonitorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetCurrentMonitor');
  late final _GetCurrentMonitor =
      _GetCurrentMonitorPtr.asFunction<int Function()>();

  Vector2 GetMonitorPosition(
    int monitor,
  ) {
    return _GetMonitorPosition(
      monitor,
    );
  }

  late final _GetMonitorPositionPtr =
      _lookup<ffi.NativeFunction<Vector2 Function(ffi.Int)>>(
          'GetMonitorPosition');
  late final _GetMonitorPosition =
      _GetMonitorPositionPtr.asFunction<Vector2 Function(int)>();

  int GetMonitorWidth(
    int monitor,
  ) {
    return _GetMonitorWidth(
      monitor,
    );
  }

  late final _GetMonitorWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('GetMonitorWidth');
  late final _GetMonitorWidth =
      _GetMonitorWidthPtr.asFunction<int Function(int)>();

  int GetMonitorHeight(
    int monitor,
  ) {
    return _GetMonitorHeight(
      monitor,
    );
  }

  late final _GetMonitorHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorHeight');
  late final _GetMonitorHeight =
      _GetMonitorHeightPtr.asFunction<int Function(int)>();

  int GetMonitorPhysicalWidth(
    int monitor,
  ) {
    return _GetMonitorPhysicalWidth(
      monitor,
    );
  }

  late final _GetMonitorPhysicalWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorPhysicalWidth');
  late final _GetMonitorPhysicalWidth =
      _GetMonitorPhysicalWidthPtr.asFunction<int Function(int)>();

  int GetMonitorPhysicalHeight(
    int monitor,
  ) {
    return _GetMonitorPhysicalHeight(
      monitor,
    );
  }

  late final _GetMonitorPhysicalHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorPhysicalHeight');
  late final _GetMonitorPhysicalHeight =
      _GetMonitorPhysicalHeightPtr.asFunction<int Function(int)>();

  int GetMonitorRefreshRate(
    int monitor,
  ) {
    return _GetMonitorRefreshRate(
      monitor,
    );
  }

  late final _GetMonitorRefreshRatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorRefreshRate');
  late final _GetMonitorRefreshRate =
      _GetMonitorRefreshRatePtr.asFunction<int Function(int)>();

  Vector2 GetWindowPosition() {
    return _GetWindowPosition();
  }

  late final _GetWindowPositionPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetWindowPosition');
  late final _GetWindowPosition =
      _GetWindowPositionPtr.asFunction<Vector2 Function()>();

  Vector2 GetWindowScaleDPI() {
    return _GetWindowScaleDPI();
  }

  late final _GetWindowScaleDPIPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetWindowScaleDPI');
  late final _GetWindowScaleDPI =
      _GetWindowScaleDPIPtr.asFunction<Vector2 Function()>();

  ffi.Pointer<ffi.Char> GetMonitorName(
    int monitor,
  ) {
    return _GetMonitorName(
      monitor,
    );
  }

  late final _GetMonitorNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'GetMonitorName');
  late final _GetMonitorName =
      _GetMonitorNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void SetClipboardText(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _SetClipboardText(
      text,
    );
  }

  late final _SetClipboardTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'SetClipboardText');
  late final _SetClipboardText =
      _SetClipboardTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetClipboardText() {
    return _GetClipboardText();
  }

  late final _GetClipboardTextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetClipboardText');
  late final _GetClipboardText =
      _GetClipboardTextPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void EnableEventWaiting() {
    return _EnableEventWaiting();
  }

  late final _EnableEventWaitingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EnableEventWaiting');
  late final _EnableEventWaiting =
      _EnableEventWaitingPtr.asFunction<void Function()>();

  void DisableEventWaiting() {
    return _DisableEventWaiting();
  }

  late final _DisableEventWaitingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('DisableEventWaiting');
  late final _DisableEventWaiting =
      _DisableEventWaitingPtr.asFunction<void Function()>();

  void ShowCursor() {
    return _ShowCursor();
  }

  late final _ShowCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ShowCursor');
  late final _ShowCursor = _ShowCursorPtr.asFunction<void Function()>();

  void HideCursor() {
    return _HideCursor();
  }

  late final _HideCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('HideCursor');
  late final _HideCursor = _HideCursorPtr.asFunction<void Function()>();

  bool IsCursorHidden() {
    return _IsCursorHidden();
  }

  late final _IsCursorHiddenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsCursorHidden');
  late final _IsCursorHidden = _IsCursorHiddenPtr.asFunction<bool Function()>();

  void EnableCursor() {
    return _EnableCursor();
  }

  late final _EnableCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EnableCursor');
  late final _EnableCursor = _EnableCursorPtr.asFunction<void Function()>();

  void DisableCursor() {
    return _DisableCursor();
  }

  late final _DisableCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('DisableCursor');
  late final _DisableCursor = _DisableCursorPtr.asFunction<void Function()>();

  bool IsCursorOnScreen() {
    return _IsCursorOnScreen();
  }

  late final _IsCursorOnScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsCursorOnScreen');
  late final _IsCursorOnScreen =
      _IsCursorOnScreenPtr.asFunction<bool Function()>();

  void ClearBackground(
    Color color,
  ) {
    return _ClearBackground(
      color,
    );
  }

  late final _ClearBackgroundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Color)>>('ClearBackground');
  late final _ClearBackground =
      _ClearBackgroundPtr.asFunction<void Function(Color)>();

  void BeginDrawing() {
    return _BeginDrawing();
  }

  late final _BeginDrawingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('BeginDrawing');
  late final _BeginDrawing = _BeginDrawingPtr.asFunction<void Function()>();

  void EndDrawing() {
    return _EndDrawing();
  }

  late final _EndDrawingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndDrawing');
  late final _EndDrawing = _EndDrawingPtr.asFunction<void Function()>();

  void BeginMode2D(
    Camera2D camera,
  ) {
    return _BeginMode2D(
      camera,
    );
  }

  late final _BeginMode2DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Camera2D)>>('BeginMode2D');
  late final _BeginMode2D =
      _BeginMode2DPtr.asFunction<void Function(Camera2D)>();

  void EndMode2D() {
    return _EndMode2D();
  }

  late final _EndMode2DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndMode2D');
  late final _EndMode2D = _EndMode2DPtr.asFunction<void Function()>();

  void BeginMode3D(
    Camera3D camera,
  ) {
    return _BeginMode3D(
      camera,
    );
  }

  late final _BeginMode3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Camera3D)>>('BeginMode3D');
  late final _BeginMode3D =
      _BeginMode3DPtr.asFunction<void Function(Camera3D)>();

  void EndMode3D() {
    return _EndMode3D();
  }

  late final _EndMode3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndMode3D');
  late final _EndMode3D = _EndMode3DPtr.asFunction<void Function()>();

  void BeginTextureMode(
    RenderTexture2D target,
  ) {
    return _BeginTextureMode(
      target,
    );
  }

  late final _BeginTextureModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RenderTexture2D)>>(
          'BeginTextureMode');
  late final _BeginTextureMode =
      _BeginTextureModePtr.asFunction<void Function(RenderTexture2D)>();

  void EndTextureMode() {
    return _EndTextureMode();
  }

  late final _EndTextureModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndTextureMode');
  late final _EndTextureMode = _EndTextureModePtr.asFunction<void Function()>();

  void BeginShaderMode(
    Shader shader,
  ) {
    return _BeginShaderMode(
      shader,
    );
  }

  late final _BeginShaderModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Shader)>>('BeginShaderMode');
  late final _BeginShaderMode =
      _BeginShaderModePtr.asFunction<void Function(Shader)>();

  void EndShaderMode() {
    return _EndShaderMode();
  }

  late final _EndShaderModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndShaderMode');
  late final _EndShaderMode = _EndShaderModePtr.asFunction<void Function()>();

  void BeginBlendMode(
    int mode,
  ) {
    return _BeginBlendMode(
      mode,
    );
  }

  late final _BeginBlendModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('BeginBlendMode');
  late final _BeginBlendMode =
      _BeginBlendModePtr.asFunction<void Function(int)>();

  void EndBlendMode() {
    return _EndBlendMode();
  }

  late final _EndBlendModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndBlendMode');
  late final _EndBlendMode = _EndBlendModePtr.asFunction<void Function()>();

  void BeginScissorMode(
    int x,
    int y,
    int width,
    int height,
  ) {
    return _BeginScissorMode(
      x,
      y,
      width,
      height,
    );
  }

  late final _BeginScissorModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('BeginScissorMode');
  late final _BeginScissorMode =
      _BeginScissorModePtr.asFunction<void Function(int, int, int, int)>();

  void EndScissorMode() {
    return _EndScissorMode();
  }

  late final _EndScissorModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndScissorMode');
  late final _EndScissorMode = _EndScissorModePtr.asFunction<void Function()>();

  void BeginVrStereoMode(
    VrStereoConfig config,
  ) {
    return _BeginVrStereoMode(
      config,
    );
  }

  late final _BeginVrStereoModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VrStereoConfig)>>(
          'BeginVrStereoMode');
  late final _BeginVrStereoMode =
      _BeginVrStereoModePtr.asFunction<void Function(VrStereoConfig)>();

  void EndVrStereoMode() {
    return _EndVrStereoMode();
  }

  late final _EndVrStereoModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndVrStereoMode');
  late final _EndVrStereoMode =
      _EndVrStereoModePtr.asFunction<void Function()>();

  VrStereoConfig LoadVrStereoConfig(
    VrDeviceInfo device,
  ) {
    return _LoadVrStereoConfig(
      device,
    );
  }

  late final _LoadVrStereoConfigPtr =
      _lookup<ffi.NativeFunction<VrStereoConfig Function(VrDeviceInfo)>>(
          'LoadVrStereoConfig');
  late final _LoadVrStereoConfig = _LoadVrStereoConfigPtr.asFunction<
      VrStereoConfig Function(VrDeviceInfo)>();

  void UnloadVrStereoConfig(
    VrStereoConfig config,
  ) {
    return _UnloadVrStereoConfig(
      config,
    );
  }

  late final _UnloadVrStereoConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VrStereoConfig)>>(
          'UnloadVrStereoConfig');
  late final _UnloadVrStereoConfig =
      _UnloadVrStereoConfigPtr.asFunction<void Function(VrStereoConfig)>();

  Shader LoadShader(
    ffi.Pointer<ffi.Char> vsFileName,
    ffi.Pointer<ffi.Char> fsFileName,
  ) {
    return _LoadShader(
      vsFileName,
      fsFileName,
    );
  }

  late final _LoadShaderPtr = _lookup<
      ffi.NativeFunction<
          Shader Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('LoadShader');
  late final _LoadShader = _LoadShaderPtr.asFunction<
      Shader Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  Shader LoadShaderFromMemory(
    ffi.Pointer<ffi.Char> vsCode,
    ffi.Pointer<ffi.Char> fsCode,
  ) {
    return _LoadShaderFromMemory(
      vsCode,
      fsCode,
    );
  }

  late final _LoadShaderFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          Shader Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LoadShaderFromMemory');
  late final _LoadShaderFromMemory = _LoadShaderFromMemoryPtr.asFunction<
      Shader Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool IsShaderReady(
    Shader shader,
  ) {
    return _IsShaderReady(
      shader,
    );
  }

  late final _IsShaderReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Shader)>>('IsShaderReady');
  late final _IsShaderReady =
      _IsShaderReadyPtr.asFunction<bool Function(Shader)>();

  int GetShaderLocation(
    Shader shader,
    ffi.Pointer<ffi.Char> uniformName,
  ) {
    return _GetShaderLocation(
      shader,
      uniformName,
    );
  }

  late final _GetShaderLocationPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(Shader, ffi.Pointer<ffi.Char>)>>(
      'GetShaderLocation');
  late final _GetShaderLocation = _GetShaderLocationPtr.asFunction<
      int Function(Shader, ffi.Pointer<ffi.Char>)>();

  int GetShaderLocationAttrib(
    Shader shader,
    ffi.Pointer<ffi.Char> attribName,
  ) {
    return _GetShaderLocationAttrib(
      shader,
      attribName,
    );
  }

  late final _GetShaderLocationAttribPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(Shader, ffi.Pointer<ffi.Char>)>>(
      'GetShaderLocationAttrib');
  late final _GetShaderLocationAttrib = _GetShaderLocationAttribPtr.asFunction<
      int Function(Shader, ffi.Pointer<ffi.Char>)>();

  void SetShaderValue(
    Shader shader,
    int locIndex,
    ffi.Pointer<ffi.Void> value,
    int uniformType,
  ) {
    return _SetShaderValue(
      shader,
      locIndex,
      value,
      uniformType,
    );
  }

  late final _SetShaderValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Shader, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('SetShaderValue');
  late final _SetShaderValue = _SetShaderValuePtr.asFunction<
      void Function(Shader, int, ffi.Pointer<ffi.Void>, int)>();

  void SetShaderValueV(
    Shader shader,
    int locIndex,
    ffi.Pointer<ffi.Void> value,
    int uniformType,
    int count,
  ) {
    return _SetShaderValueV(
      shader,
      locIndex,
      value,
      uniformType,
      count,
    );
  }

  late final _SetShaderValueVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Shader, ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('SetShaderValueV');
  late final _SetShaderValueV = _SetShaderValueVPtr.asFunction<
      void Function(Shader, int, ffi.Pointer<ffi.Void>, int, int)>();

  void SetShaderValueMatrix(
    Shader shader,
    int locIndex,
    Matrix mat,
  ) {
    return _SetShaderValueMatrix(
      shader,
      locIndex,
      mat,
    );
  }

  late final _SetShaderValueMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Shader, ffi.Int, Matrix)>>(
          'SetShaderValueMatrix');
  late final _SetShaderValueMatrix =
      _SetShaderValueMatrixPtr.asFunction<void Function(Shader, int, Matrix)>();

  void SetShaderValueTexture(
    Shader shader,
    int locIndex,
    Texture2D texture,
  ) {
    return _SetShaderValueTexture(
      shader,
      locIndex,
      texture,
    );
  }

  late final _SetShaderValueTexturePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Shader, ffi.Int, Texture2D)>>(
      'SetShaderValueTexture');
  late final _SetShaderValueTexture = _SetShaderValueTexturePtr.asFunction<
      void Function(Shader, int, Texture2D)>();

  void UnloadShader(
    Shader shader,
  ) {
    return _UnloadShader(
      shader,
    );
  }

  late final _UnloadShaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Shader)>>('UnloadShader');
  late final _UnloadShader =
      _UnloadShaderPtr.asFunction<void Function(Shader)>();

  Ray GetMouseRay(
    Vector2 mousePosition,
    Camera camera,
  ) {
    return _GetMouseRay(
      mousePosition,
      camera,
    );
  }

  late final _GetMouseRayPtr =
      _lookup<ffi.NativeFunction<Ray Function(Vector2, Camera)>>('GetMouseRay');
  late final _GetMouseRay =
      _GetMouseRayPtr.asFunction<Ray Function(Vector2, Camera)>();

  Matrix GetCameraMatrix(
    Camera camera,
  ) {
    return _GetCameraMatrix(
      camera,
    );
  }

  late final _GetCameraMatrixPtr =
      _lookup<ffi.NativeFunction<Matrix Function(Camera)>>('GetCameraMatrix');
  late final _GetCameraMatrix =
      _GetCameraMatrixPtr.asFunction<Matrix Function(Camera)>();

  Matrix GetCameraMatrix2D(
    Camera2D camera,
  ) {
    return _GetCameraMatrix2D(
      camera,
    );
  }

  late final _GetCameraMatrix2DPtr =
      _lookup<ffi.NativeFunction<Matrix Function(Camera2D)>>(
          'GetCameraMatrix2D');
  late final _GetCameraMatrix2D =
      _GetCameraMatrix2DPtr.asFunction<Matrix Function(Camera2D)>();

  Vector2 GetWorldToScreen(
    Vector3 position,
    Camera camera,
  ) {
    return _GetWorldToScreen(
      position,
      camera,
    );
  }

  late final _GetWorldToScreenPtr =
      _lookup<ffi.NativeFunction<Vector2 Function(Vector3, Camera)>>(
          'GetWorldToScreen');
  late final _GetWorldToScreen =
      _GetWorldToScreenPtr.asFunction<Vector2 Function(Vector3, Camera)>();

  Vector2 GetScreenToWorld2D(
    Vector2 position,
    Camera2D camera,
  ) {
    return _GetScreenToWorld2D(
      position,
      camera,
    );
  }

  late final _GetScreenToWorld2DPtr =
      _lookup<ffi.NativeFunction<Vector2 Function(Vector2, Camera2D)>>(
          'GetScreenToWorld2D');
  late final _GetScreenToWorld2D =
      _GetScreenToWorld2DPtr.asFunction<Vector2 Function(Vector2, Camera2D)>();

  Vector2 GetWorldToScreenEx(
    Vector3 position,
    Camera camera,
    int width,
    int height,
  ) {
    return _GetWorldToScreenEx(
      position,
      camera,
      width,
      height,
    );
  }

  late final _GetWorldToScreenExPtr = _lookup<
          ffi
          .NativeFunction<Vector2 Function(Vector3, Camera, ffi.Int, ffi.Int)>>(
      'GetWorldToScreenEx');
  late final _GetWorldToScreenEx = _GetWorldToScreenExPtr.asFunction<
      Vector2 Function(Vector3, Camera, int, int)>();

  Vector2 GetWorldToScreen2D(
    Vector2 position,
    Camera2D camera,
  ) {
    return _GetWorldToScreen2D(
      position,
      camera,
    );
  }

  late final _GetWorldToScreen2DPtr =
      _lookup<ffi.NativeFunction<Vector2 Function(Vector2, Camera2D)>>(
          'GetWorldToScreen2D');
  late final _GetWorldToScreen2D =
      _GetWorldToScreen2DPtr.asFunction<Vector2 Function(Vector2, Camera2D)>();

  void SetTargetFPS(
    int fps,
  ) {
    return _SetTargetFPS(
      fps,
    );
  }

  late final _SetTargetFPSPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('SetTargetFPS');
  late final _SetTargetFPS = _SetTargetFPSPtr.asFunction<void Function(int)>();

  double GetFrameTime() {
    return _GetFrameTime();
  }

  late final _GetFrameTimePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetFrameTime');
  late final _GetFrameTime = _GetFrameTimePtr.asFunction<double Function()>();

  double GetTime() {
    return _GetTime();
  }

  late final _GetTimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('GetTime');
  late final _GetTime = _GetTimePtr.asFunction<double Function()>();

  int GetFPS() {
    return _GetFPS();
  }

  late final _GetFPSPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetFPS');
  late final _GetFPS = _GetFPSPtr.asFunction<int Function()>();

  void SwapScreenBuffer() {
    return _SwapScreenBuffer();
  }

  late final _SwapScreenBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SwapScreenBuffer');
  late final _SwapScreenBuffer =
      _SwapScreenBufferPtr.asFunction<void Function()>();

  void PollInputEvents() {
    return _PollInputEvents();
  }

  late final _PollInputEventsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('PollInputEvents');
  late final _PollInputEvents =
      _PollInputEventsPtr.asFunction<void Function()>();

  void WaitTime(
    double seconds,
  ) {
    return _WaitTime(
      seconds,
    );
  }

  late final _WaitTimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Double)>>('WaitTime');
  late final _WaitTime = _WaitTimePtr.asFunction<void Function(double)>();

  void SetRandomSeed(
    int seed,
  ) {
    return _SetRandomSeed(
      seed,
    );
  }

  late final _SetRandomSeedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetRandomSeed');
  late final _SetRandomSeed =
      _SetRandomSeedPtr.asFunction<void Function(int)>();

  int GetRandomValue(
    int min,
    int max,
  ) {
    return _GetRandomValue(
      min,
      max,
    );
  }

  late final _GetRandomValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'GetRandomValue');
  late final _GetRandomValue =
      _GetRandomValuePtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Int> LoadRandomSequence(
    int count,
    int min,
    int max,
  ) {
    return _LoadRandomSequence(
      count,
      min,
      max,
    );
  }

  late final _LoadRandomSequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.UnsignedInt, ffi.Int, ffi.Int)>>('LoadRandomSequence');
  late final _LoadRandomSequence = _LoadRandomSequencePtr.asFunction<
      ffi.Pointer<ffi.Int> Function(int, int, int)>();

  void UnloadRandomSequence(
    ffi.Pointer<ffi.Int> sequence,
  ) {
    return _UnloadRandomSequence(
      sequence,
    );
  }

  late final _UnloadRandomSequencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'UnloadRandomSequence');
  late final _UnloadRandomSequence = _UnloadRandomSequencePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>)>();

  void TakeScreenshot(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _TakeScreenshot(
      fileName,
    );
  }

  late final _TakeScreenshotPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'TakeScreenshot');
  late final _TakeScreenshot =
      _TakeScreenshotPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void SetConfigFlags(
    int flags,
  ) {
    return _SetConfigFlags(
      flags,
    );
  }

  late final _SetConfigFlagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetConfigFlags');
  late final _SetConfigFlags =
      _SetConfigFlagsPtr.asFunction<void Function(int)>();

  void OpenURL(
    ffi.Pointer<ffi.Char> url,
  ) {
    return _OpenURL(
      url,
    );
  }

  late final _OpenURLPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'OpenURL');
  late final _OpenURL =
      _OpenURLPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void TraceLog(
    int logLevel,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TraceLog(
      logLevel,
      text,
    );
  }

  late final _TraceLogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('TraceLog');
  late final _TraceLog =
      _TraceLogPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void SetTraceLogLevel(
    int logLevel,
  ) {
    return _SetTraceLogLevel(
      logLevel,
    );
  }

  late final _SetTraceLogLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetTraceLogLevel');
  late final _SetTraceLogLevel =
      _SetTraceLogLevelPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Void> MemAlloc(
    int size,
  ) {
    return _MemAlloc(
      size,
    );
  }

  late final _MemAllocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.UnsignedInt)>>(
      'MemAlloc');
  late final _MemAlloc =
      _MemAllocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> MemRealloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _MemRealloc(
      ptr,
      size,
    );
  }

  late final _MemReallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('MemRealloc');
  late final _MemRealloc = _MemReallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void MemFree(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _MemFree(
      ptr,
    );
  }

  late final _MemFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MemFree');
  late final _MemFree =
      _MemFreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void SetTraceLogCallback(
    TraceLogCallback callback,
  ) {
    return _SetTraceLogCallback(
      callback,
    );
  }

  late final _SetTraceLogCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TraceLogCallback)>>(
          'SetTraceLogCallback');
  late final _SetTraceLogCallback =
      _SetTraceLogCallbackPtr.asFunction<void Function(TraceLogCallback)>();

  void SetLoadFileDataCallback(
    LoadFileDataCallback callback,
  ) {
    return _SetLoadFileDataCallback(
      callback,
    );
  }

  late final _SetLoadFileDataCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LoadFileDataCallback)>>(
          'SetLoadFileDataCallback');
  late final _SetLoadFileDataCallback = _SetLoadFileDataCallbackPtr.asFunction<
      void Function(LoadFileDataCallback)>();

  void SetSaveFileDataCallback(
    SaveFileDataCallback callback,
  ) {
    return _SetSaveFileDataCallback(
      callback,
    );
  }

  late final _SetSaveFileDataCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SaveFileDataCallback)>>(
          'SetSaveFileDataCallback');
  late final _SetSaveFileDataCallback = _SetSaveFileDataCallbackPtr.asFunction<
      void Function(SaveFileDataCallback)>();

  void SetLoadFileTextCallback(
    LoadFileTextCallback callback,
  ) {
    return _SetLoadFileTextCallback(
      callback,
    );
  }

  late final _SetLoadFileTextCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LoadFileTextCallback)>>(
          'SetLoadFileTextCallback');
  late final _SetLoadFileTextCallback = _SetLoadFileTextCallbackPtr.asFunction<
      void Function(LoadFileTextCallback)>();

  void SetSaveFileTextCallback(
    SaveFileTextCallback callback,
  ) {
    return _SetSaveFileTextCallback(
      callback,
    );
  }

  late final _SetSaveFileTextCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SaveFileTextCallback)>>(
          'SetSaveFileTextCallback');
  late final _SetSaveFileTextCallback = _SetSaveFileTextCallbackPtr.asFunction<
      void Function(SaveFileTextCallback)>();

  ffi.Pointer<ffi.UnsignedChar> LoadFileData(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> dataSize,
  ) {
    return _LoadFileData(
      fileName,
      dataSize,
    );
  }

  late final _LoadFileDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadFileData');
  late final _LoadFileData = _LoadFileDataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  void UnloadFileData(
    ffi.Pointer<ffi.UnsignedChar> data,
  ) {
    return _UnloadFileData(
      data,
    );
  }

  late final _UnloadFileDataPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>)>>(
      'UnloadFileData');
  late final _UnloadFileData = _UnloadFileDataPtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>)>();

  bool SaveFileData(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
  ) {
    return _SaveFileData(
      fileName,
      data,
      dataSize,
    );
  }

  late final _SaveFileDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('SaveFileData');
  late final _SaveFileData = _SaveFileDataPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  bool ExportDataAsCode(
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportDataAsCode(
      data,
      dataSize,
      fileName,
    );
  }

  late final _ExportDataAsCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('ExportDataAsCode');
  late final _ExportDataAsCode = _ExportDataAsCodePtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> LoadFileText(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadFileText(
      fileName,
    );
  }

  late final _LoadFileTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('LoadFileText');
  late final _LoadFileText = _LoadFileTextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void UnloadFileText(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UnloadFileText(
      text,
    );
  }

  late final _UnloadFileTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'UnloadFileText');
  late final _UnloadFileText =
      _UnloadFileTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  bool SaveFileText(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _SaveFileText(
      fileName,
      text,
    );
  }

  late final _SaveFileTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('SaveFileText');
  late final _SaveFileText = _SaveFileTextPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool FileExists(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _FileExists(
      fileName,
    );
  }

  late final _FileExistsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'FileExists');
  late final _FileExists =
      _FileExistsPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool DirectoryExists(
    ffi.Pointer<ffi.Char> dirPath,
  ) {
    return _DirectoryExists(
      dirPath,
    );
  }

  late final _DirectoryExistsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'DirectoryExists');
  late final _DirectoryExists =
      _DirectoryExistsPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool IsFileExtension(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Char> ext,
  ) {
    return _IsFileExtension(
      fileName,
      ext,
    );
  }

  late final _IsFileExtensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('IsFileExtension');
  late final _IsFileExtension = _IsFileExtensionPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int GetFileLength(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _GetFileLength(
      fileName,
    );
  }

  late final _GetFileLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'GetFileLength');
  late final _GetFileLength =
      _GetFileLengthPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetFileExtension(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _GetFileExtension(
      fileName,
    );
  }

  late final _GetFileExtensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetFileExtension');
  late final _GetFileExtension = _GetFileExtensionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetFileName(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _GetFileName(
      filePath,
    );
  }

  late final _GetFileNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetFileName');
  late final _GetFileName = _GetFileNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetFileNameWithoutExt(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _GetFileNameWithoutExt(
      filePath,
    );
  }

  late final _GetFileNameWithoutExtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetFileNameWithoutExt');
  late final _GetFileNameWithoutExt = _GetFileNameWithoutExtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetDirectoryPath(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _GetDirectoryPath(
      filePath,
    );
  }

  late final _GetDirectoryPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetDirectoryPath');
  late final _GetDirectoryPath = _GetDirectoryPathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetPrevDirectoryPath(
    ffi.Pointer<ffi.Char> dirPath,
  ) {
    return _GetPrevDirectoryPath(
      dirPath,
    );
  }

  late final _GetPrevDirectoryPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetPrevDirectoryPath');
  late final _GetPrevDirectoryPath = _GetPrevDirectoryPathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetWorkingDirectory() {
    return _GetWorkingDirectory();
  }

  late final _GetWorkingDirectoryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetWorkingDirectory');
  late final _GetWorkingDirectory =
      _GetWorkingDirectoryPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetApplicationDirectory() {
    return _GetApplicationDirectory();
  }

  late final _GetApplicationDirectoryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetApplicationDirectory');
  late final _GetApplicationDirectory = _GetApplicationDirectoryPtr.asFunction<
      ffi.Pointer<ffi.Char> Function()>();

  bool ChangeDirectory(
    ffi.Pointer<ffi.Char> dir,
  ) {
    return _ChangeDirectory(
      dir,
    );
  }

  late final _ChangeDirectoryPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'ChangeDirectory');
  late final _ChangeDirectory =
      _ChangeDirectoryPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool IsPathFile(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _IsPathFile(
      path,
    );
  }

  late final _IsPathFilePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'IsPathFile');
  late final _IsPathFile =
      _IsPathFilePtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  FilePathList LoadDirectoryFiles(
    ffi.Pointer<ffi.Char> dirPath,
  ) {
    return _LoadDirectoryFiles(
      dirPath,
    );
  }

  late final _LoadDirectoryFilesPtr =
      _lookup<ffi.NativeFunction<FilePathList Function(ffi.Pointer<ffi.Char>)>>(
          'LoadDirectoryFiles');
  late final _LoadDirectoryFiles = _LoadDirectoryFilesPtr.asFunction<
      FilePathList Function(ffi.Pointer<ffi.Char>)>();

  FilePathList LoadDirectoryFilesEx(
    ffi.Pointer<ffi.Char> basePath,
    ffi.Pointer<ffi.Char> filter,
    bool scanSubdirs,
  ) {
    return _LoadDirectoryFilesEx(
      basePath,
      filter,
      scanSubdirs,
    );
  }

  late final _LoadDirectoryFilesExPtr = _lookup<
      ffi.NativeFunction<
          FilePathList Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('LoadDirectoryFilesEx');
  late final _LoadDirectoryFilesEx = _LoadDirectoryFilesExPtr.asFunction<
      FilePathList Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool)>();

  void UnloadDirectoryFiles(
    FilePathList files,
  ) {
    return _UnloadDirectoryFiles(
      files,
    );
  }

  late final _UnloadDirectoryFilesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FilePathList)>>(
          'UnloadDirectoryFiles');
  late final _UnloadDirectoryFiles =
      _UnloadDirectoryFilesPtr.asFunction<void Function(FilePathList)>();

  bool IsFileDropped() {
    return _IsFileDropped();
  }

  late final _IsFileDroppedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsFileDropped');
  late final _IsFileDropped = _IsFileDroppedPtr.asFunction<bool Function()>();

  FilePathList LoadDroppedFiles() {
    return _LoadDroppedFiles();
  }

  late final _LoadDroppedFilesPtr =
      _lookup<ffi.NativeFunction<FilePathList Function()>>('LoadDroppedFiles');
  late final _LoadDroppedFiles =
      _LoadDroppedFilesPtr.asFunction<FilePathList Function()>();

  void UnloadDroppedFiles(
    FilePathList files,
  ) {
    return _UnloadDroppedFiles(
      files,
    );
  }

  late final _UnloadDroppedFilesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FilePathList)>>(
          'UnloadDroppedFiles');
  late final _UnloadDroppedFiles =
      _UnloadDroppedFilesPtr.asFunction<void Function(FilePathList)>();

  int GetFileModTime(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _GetFileModTime(
      fileName,
    );
  }

  late final _GetFileModTimePtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'GetFileModTime');
  late final _GetFileModTime =
      _GetFileModTimePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedChar> CompressData(
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
    ffi.Pointer<ffi.Int> compDataSize,
  ) {
    return _CompressData(
      data,
      dataSize,
      compDataSize,
    );
  }

  late final _CompressDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('CompressData');
  late final _CompressData = _CompressDataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.UnsignedChar> DecompressData(
    ffi.Pointer<ffi.UnsignedChar> compData,
    int compDataSize,
    ffi.Pointer<ffi.Int> dataSize,
  ) {
    return _DecompressData(
      compData,
      compDataSize,
      dataSize,
    );
  }

  late final _DecompressDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('DecompressData');
  late final _DecompressData = _DecompressDataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> EncodeDataBase64(
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
    ffi.Pointer<ffi.Int> outputSize,
  ) {
    return _EncodeDataBase64(
      data,
      dataSize,
      outputSize,
    );
  }

  late final _EncodeDataBase64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('EncodeDataBase64');
  late final _EncodeDataBase64 = _EncodeDataBase64Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.UnsignedChar> DecodeDataBase64(
    ffi.Pointer<ffi.UnsignedChar> data,
    ffi.Pointer<ffi.Int> outputSize,
  ) {
    return _DecodeDataBase64(
      data,
      outputSize,
    );
  }

  late final _DecodeDataBase64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('DecodeDataBase64');
  late final _DecodeDataBase64 = _DecodeDataBase64Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  AutomationEventList LoadAutomationEventList(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadAutomationEventList(
      fileName,
    );
  }

  late final _LoadAutomationEventListPtr = _lookup<
          ffi
          .NativeFunction<AutomationEventList Function(ffi.Pointer<ffi.Char>)>>(
      'LoadAutomationEventList');
  late final _LoadAutomationEventList = _LoadAutomationEventListPtr.asFunction<
      AutomationEventList Function(ffi.Pointer<ffi.Char>)>();

  void UnloadAutomationEventList(
    ffi.Pointer<AutomationEventList> list,
  ) {
    return _UnloadAutomationEventList(
      list,
    );
  }

  late final _UnloadAutomationEventListPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<AutomationEventList>)>>(
      'UnloadAutomationEventList');
  late final _UnloadAutomationEventList = _UnloadAutomationEventListPtr
      .asFunction<void Function(ffi.Pointer<AutomationEventList>)>();

  bool ExportAutomationEventList(
    AutomationEventList list,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportAutomationEventList(
      list,
      fileName,
    );
  }

  late final _ExportAutomationEventListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(AutomationEventList,
              ffi.Pointer<ffi.Char>)>>('ExportAutomationEventList');
  late final _ExportAutomationEventList = _ExportAutomationEventListPtr
      .asFunction<bool Function(AutomationEventList, ffi.Pointer<ffi.Char>)>();

  void SetAutomationEventList(
    ffi.Pointer<AutomationEventList> list,
  ) {
    return _SetAutomationEventList(
      list,
    );
  }

  late final _SetAutomationEventListPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<AutomationEventList>)>>(
      'SetAutomationEventList');
  late final _SetAutomationEventList = _SetAutomationEventListPtr.asFunction<
      void Function(ffi.Pointer<AutomationEventList>)>();

  void SetAutomationEventBaseFrame(
    int frame,
  ) {
    return _SetAutomationEventBaseFrame(
      frame,
    );
  }

  late final _SetAutomationEventBaseFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetAutomationEventBaseFrame');
  late final _SetAutomationEventBaseFrame =
      _SetAutomationEventBaseFramePtr.asFunction<void Function(int)>();

  void StartAutomationEventRecording() {
    return _StartAutomationEventRecording();
  }

  late final _StartAutomationEventRecordingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'StartAutomationEventRecording');
  late final _StartAutomationEventRecording =
      _StartAutomationEventRecordingPtr.asFunction<void Function()>();

  void StopAutomationEventRecording() {
    return _StopAutomationEventRecording();
  }

  late final _StopAutomationEventRecordingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'StopAutomationEventRecording');
  late final _StopAutomationEventRecording =
      _StopAutomationEventRecordingPtr.asFunction<void Function()>();

  void PlayAutomationEvent(
    AutomationEvent event,
  ) {
    return _PlayAutomationEvent(
      event,
    );
  }

  late final _PlayAutomationEventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AutomationEvent)>>(
          'PlayAutomationEvent');
  late final _PlayAutomationEvent =
      _PlayAutomationEventPtr.asFunction<void Function(AutomationEvent)>();

  bool IsKeyPressed(
    int key,
  ) {
    return _IsKeyPressed(
      key,
    );
  }

  late final _IsKeyPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyPressed');
  late final _IsKeyPressed = _IsKeyPressedPtr.asFunction<bool Function(int)>();

  bool IsKeyPressedRepeat(
    int key,
  ) {
    return _IsKeyPressedRepeat(
      key,
    );
  }

  late final _IsKeyPressedRepeatPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsKeyPressedRepeat');
  late final _IsKeyPressedRepeat =
      _IsKeyPressedRepeatPtr.asFunction<bool Function(int)>();

  bool IsKeyDown(
    int key,
  ) {
    return _IsKeyDown(
      key,
    );
  }

  late final _IsKeyDownPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyDown');
  late final _IsKeyDown = _IsKeyDownPtr.asFunction<bool Function(int)>();

  bool IsKeyReleased(
    int key,
  ) {
    return _IsKeyReleased(
      key,
    );
  }

  late final _IsKeyReleasedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyReleased');
  late final _IsKeyReleased =
      _IsKeyReleasedPtr.asFunction<bool Function(int)>();

  bool IsKeyUp(
    int key,
  ) {
    return _IsKeyUp(
      key,
    );
  }

  late final _IsKeyUpPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyUp');
  late final _IsKeyUp = _IsKeyUpPtr.asFunction<bool Function(int)>();

  int GetKeyPressed() {
    return _GetKeyPressed();
  }

  late final _GetKeyPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetKeyPressed');
  late final _GetKeyPressed = _GetKeyPressedPtr.asFunction<int Function()>();

  int GetCharPressed() {
    return _GetCharPressed();
  }

  late final _GetCharPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetCharPressed');
  late final _GetCharPressed = _GetCharPressedPtr.asFunction<int Function()>();

  void SetExitKey(
    int key,
  ) {
    return _SetExitKey(
      key,
    );
  }

  late final _SetExitKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('SetExitKey');
  late final _SetExitKey = _SetExitKeyPtr.asFunction<void Function(int)>();

  bool IsGamepadAvailable(
    int gamepad,
  ) {
    return _IsGamepadAvailable(
      gamepad,
    );
  }

  late final _IsGamepadAvailablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsGamepadAvailable');
  late final _IsGamepadAvailable =
      _IsGamepadAvailablePtr.asFunction<bool Function(int)>();

  ffi.Pointer<ffi.Char> GetGamepadName(
    int gamepad,
  ) {
    return _GetGamepadName(
      gamepad,
    );
  }

  late final _GetGamepadNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'GetGamepadName');
  late final _GetGamepadName =
      _GetGamepadNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  bool IsGamepadButtonPressed(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonPressed(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonPressed');
  late final _IsGamepadButtonPressed =
      _IsGamepadButtonPressedPtr.asFunction<bool Function(int, int)>();

  bool IsGamepadButtonDown(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonDown(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonDownPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonDown');
  late final _IsGamepadButtonDown =
      _IsGamepadButtonDownPtr.asFunction<bool Function(int, int)>();

  bool IsGamepadButtonReleased(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonReleased(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonReleasedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonReleased');
  late final _IsGamepadButtonReleased =
      _IsGamepadButtonReleasedPtr.asFunction<bool Function(int, int)>();

  bool IsGamepadButtonUp(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonUp(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonUpPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonUp');
  late final _IsGamepadButtonUp =
      _IsGamepadButtonUpPtr.asFunction<bool Function(int, int)>();

  int GetGamepadButtonPressed() {
    return _GetGamepadButtonPressed();
  }

  late final _GetGamepadButtonPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'GetGamepadButtonPressed');
  late final _GetGamepadButtonPressed =
      _GetGamepadButtonPressedPtr.asFunction<int Function()>();

  int GetGamepadAxisCount(
    int gamepad,
  ) {
    return _GetGamepadAxisCount(
      gamepad,
    );
  }

  late final _GetGamepadAxisCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetGamepadAxisCount');
  late final _GetGamepadAxisCount =
      _GetGamepadAxisCountPtr.asFunction<int Function(int)>();

  double GetGamepadAxisMovement(
    int gamepad,
    int axis,
  ) {
    return _GetGamepadAxisMovement(
      gamepad,
      axis,
    );
  }

  late final _GetGamepadAxisMovementPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Int)>>(
          'GetGamepadAxisMovement');
  late final _GetGamepadAxisMovement =
      _GetGamepadAxisMovementPtr.asFunction<double Function(int, int)>();

  int SetGamepadMappings(
    ffi.Pointer<ffi.Char> mappings,
  ) {
    return _SetGamepadMappings(
      mappings,
    );
  }

  late final _SetGamepadMappingsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'SetGamepadMappings');
  late final _SetGamepadMappings =
      _SetGamepadMappingsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  bool IsMouseButtonPressed(
    int button,
  ) {
    return _IsMouseButtonPressed(
      button,
    );
  }

  late final _IsMouseButtonPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonPressed');
  late final _IsMouseButtonPressed =
      _IsMouseButtonPressedPtr.asFunction<bool Function(int)>();

  bool IsMouseButtonDown(
    int button,
  ) {
    return _IsMouseButtonDown(
      button,
    );
  }

  late final _IsMouseButtonDownPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonDown');
  late final _IsMouseButtonDown =
      _IsMouseButtonDownPtr.asFunction<bool Function(int)>();

  bool IsMouseButtonReleased(
    int button,
  ) {
    return _IsMouseButtonReleased(
      button,
    );
  }

  late final _IsMouseButtonReleasedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonReleased');
  late final _IsMouseButtonReleased =
      _IsMouseButtonReleasedPtr.asFunction<bool Function(int)>();

  bool IsMouseButtonUp(
    int button,
  ) {
    return _IsMouseButtonUp(
      button,
    );
  }

  late final _IsMouseButtonUpPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonUp');
  late final _IsMouseButtonUp =
      _IsMouseButtonUpPtr.asFunction<bool Function(int)>();

  int GetMouseX() {
    return _GetMouseX();
  }

  late final _GetMouseXPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetMouseX');
  late final _GetMouseX = _GetMouseXPtr.asFunction<int Function()>();

  int GetMouseY() {
    return _GetMouseY();
  }

  late final _GetMouseYPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetMouseY');
  late final _GetMouseY = _GetMouseYPtr.asFunction<int Function()>();

  Vector2 GetMousePosition() {
    return _GetMousePosition();
  }

  late final _GetMousePositionPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetMousePosition');
  late final _GetMousePosition =
      _GetMousePositionPtr.asFunction<Vector2 Function()>();

  Vector2 GetMouseDelta() {
    return _GetMouseDelta();
  }

  late final _GetMouseDeltaPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetMouseDelta');
  late final _GetMouseDelta =
      _GetMouseDeltaPtr.asFunction<Vector2 Function()>();

  void SetMousePosition(
    int x,
    int y,
  ) {
    return _SetMousePosition(
      x,
      y,
    );
  }

  late final _SetMousePositionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetMousePosition');
  late final _SetMousePosition =
      _SetMousePositionPtr.asFunction<void Function(int, int)>();

  void SetMouseOffset(
    int offsetX,
    int offsetY,
  ) {
    return _SetMouseOffset(
      offsetX,
      offsetY,
    );
  }

  late final _SetMouseOffsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetMouseOffset');
  late final _SetMouseOffset =
      _SetMouseOffsetPtr.asFunction<void Function(int, int)>();

  void SetMouseScale(
    double scaleX,
    double scaleY,
  ) {
    return _SetMouseScale(
      scaleX,
      scaleY,
    );
  }

  late final _SetMouseScalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'SetMouseScale');
  late final _SetMouseScale =
      _SetMouseScalePtr.asFunction<void Function(double, double)>();

  double GetMouseWheelMove() {
    return _GetMouseWheelMove();
  }

  late final _GetMouseWheelMovePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetMouseWheelMove');
  late final _GetMouseWheelMove =
      _GetMouseWheelMovePtr.asFunction<double Function()>();

  Vector2 GetMouseWheelMoveV() {
    return _GetMouseWheelMoveV();
  }

  late final _GetMouseWheelMoveVPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetMouseWheelMoveV');
  late final _GetMouseWheelMoveV =
      _GetMouseWheelMoveVPtr.asFunction<Vector2 Function()>();

  void SetMouseCursor(
    int cursor,
  ) {
    return _SetMouseCursor(
      cursor,
    );
  }

  late final _SetMouseCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('SetMouseCursor');
  late final _SetMouseCursor =
      _SetMouseCursorPtr.asFunction<void Function(int)>();

  int GetTouchX() {
    return _GetTouchX();
  }

  late final _GetTouchXPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetTouchX');
  late final _GetTouchX = _GetTouchXPtr.asFunction<int Function()>();

  int GetTouchY() {
    return _GetTouchY();
  }

  late final _GetTouchYPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetTouchY');
  late final _GetTouchY = _GetTouchYPtr.asFunction<int Function()>();

  Vector2 GetTouchPosition(
    int index,
  ) {
    return _GetTouchPosition(
      index,
    );
  }

  late final _GetTouchPositionPtr =
      _lookup<ffi.NativeFunction<Vector2 Function(ffi.Int)>>(
          'GetTouchPosition');
  late final _GetTouchPosition =
      _GetTouchPositionPtr.asFunction<Vector2 Function(int)>();

  int GetTouchPointId(
    int index,
  ) {
    return _GetTouchPointId(
      index,
    );
  }

  late final _GetTouchPointIdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('GetTouchPointId');
  late final _GetTouchPointId =
      _GetTouchPointIdPtr.asFunction<int Function(int)>();

  int GetTouchPointCount() {
    return _GetTouchPointCount();
  }

  late final _GetTouchPointCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetTouchPointCount');
  late final _GetTouchPointCount =
      _GetTouchPointCountPtr.asFunction<int Function()>();

  void SetGesturesEnabled(
    int flags,
  ) {
    return _SetGesturesEnabled(
      flags,
    );
  }

  late final _SetGesturesEnabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetGesturesEnabled');
  late final _SetGesturesEnabled =
      _SetGesturesEnabledPtr.asFunction<void Function(int)>();

  bool IsGestureDetected(
    int gesture,
  ) {
    return _IsGestureDetected(
      gesture,
    );
  }

  late final _IsGestureDetectedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'IsGestureDetected');
  late final _IsGestureDetected =
      _IsGestureDetectedPtr.asFunction<bool Function(int)>();

  int GetGestureDetected() {
    return _GetGestureDetected();
  }

  late final _GetGestureDetectedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetGestureDetected');
  late final _GetGestureDetected =
      _GetGestureDetectedPtr.asFunction<int Function()>();

  double GetGestureHoldDuration() {
    return _GetGestureHoldDuration();
  }

  late final _GetGestureHoldDurationPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>(
          'GetGestureHoldDuration');
  late final _GetGestureHoldDuration =
      _GetGestureHoldDurationPtr.asFunction<double Function()>();

  Vector2 GetGestureDragVector() {
    return _GetGestureDragVector();
  }

  late final _GetGestureDragVectorPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetGestureDragVector');
  late final _GetGestureDragVector =
      _GetGestureDragVectorPtr.asFunction<Vector2 Function()>();

  double GetGestureDragAngle() {
    return _GetGestureDragAngle();
  }

  late final _GetGestureDragAnglePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetGestureDragAngle');
  late final _GetGestureDragAngle =
      _GetGestureDragAnglePtr.asFunction<double Function()>();

  Vector2 GetGesturePinchVector() {
    return _GetGesturePinchVector();
  }

  late final _GetGesturePinchVectorPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetGesturePinchVector');
  late final _GetGesturePinchVector =
      _GetGesturePinchVectorPtr.asFunction<Vector2 Function()>();

  double GetGesturePinchAngle() {
    return _GetGesturePinchAngle();
  }

  late final _GetGesturePinchAnglePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetGesturePinchAngle');
  late final _GetGesturePinchAngle =
      _GetGesturePinchAnglePtr.asFunction<double Function()>();

  void UpdateCamera(
    ffi.Pointer<Camera> camera,
    int mode,
  ) {
    return _UpdateCamera(
      camera,
      mode,
    );
  }

  late final _UpdateCameraPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Camera>, ffi.Int)>>(
      'UpdateCamera');
  late final _UpdateCamera =
      _UpdateCameraPtr.asFunction<void Function(ffi.Pointer<Camera>, int)>();

  void UpdateCameraPro(
    ffi.Pointer<Camera> camera,
    Vector3 movement,
    Vector3 rotation,
    double zoom,
  ) {
    return _UpdateCameraPro(
      camera,
      movement,
      rotation,
      zoom,
    );
  }

  late final _UpdateCameraProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Camera>, Vector3, Vector3,
              ffi.Float)>>('UpdateCameraPro');
  late final _UpdateCameraPro = _UpdateCameraProPtr.asFunction<
      void Function(ffi.Pointer<Camera>, Vector3, Vector3, double)>();

  void SetShapesTexture(
    Texture2D texture,
    Rectangle source,
  ) {
    return _SetShapesTexture(
      texture,
      source,
    );
  }

  late final _SetShapesTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Texture2D, Rectangle)>>(
          'SetShapesTexture');
  late final _SetShapesTexture =
      _SetShapesTexturePtr.asFunction<void Function(Texture2D, Rectangle)>();

  void DrawPixel(
    int posX,
    int posY,
    Color color,
  ) {
    return _DrawPixel(
      posX,
      posY,
      color,
    );
  }

  late final _DrawPixelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int, Color)>>(
          'DrawPixel');
  late final _DrawPixel =
      _DrawPixelPtr.asFunction<void Function(int, int, Color)>();

  void DrawPixelV(
    Vector2 position,
    Color color,
  ) {
    return _DrawPixelV(
      position,
      color,
    );
  }

  late final _DrawPixelVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector2, Color)>>(
          'DrawPixelV');
  late final _DrawPixelV =
      _DrawPixelVPtr.asFunction<void Function(Vector2, Color)>();

  void DrawLine(
    int startPosX,
    int startPosY,
    int endPosX,
    int endPosY,
    Color color,
  ) {
    return _DrawLine(
      startPosX,
      startPosY,
      endPosX,
      endPosY,
      color,
    );
  }

  late final _DrawLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int, Color)>>('DrawLine');
  late final _DrawLine =
      _DrawLinePtr.asFunction<void Function(int, int, int, int, Color)>();

  void DrawLineV(
    Vector2 startPos,
    Vector2 endPos,
    Color color,
  ) {
    return _DrawLineV(
      startPos,
      endPos,
      color,
    );
  }

  late final _DrawLineVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector2, Vector2, Color)>>(
          'DrawLineV');
  late final _DrawLineV =
      _DrawLineVPtr.asFunction<void Function(Vector2, Vector2, Color)>();

  void DrawLineEx(
    Vector2 startPos,
    Vector2 endPos,
    double thick,
    Color color,
  ) {
    return _DrawLineEx(
      startPos,
      endPos,
      thick,
      color,
    );
  }

  late final _DrawLineExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, ffi.Float, Color)>>('DrawLineEx');
  late final _DrawLineEx = _DrawLineExPtr.asFunction<
      void Function(Vector2, Vector2, double, Color)>();

  void DrawLineStrip(
    ffi.Pointer<Vector2> points,
    int pointCount,
    Color color,
  ) {
    return _DrawLineStrip(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawLineStripPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Vector2>, ffi.Int, Color)>>('DrawLineStrip');
  late final _DrawLineStrip = _DrawLineStripPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, Color)>();

  void DrawLineBezier(
    Vector2 startPos,
    Vector2 endPos,
    double thick,
    Color color,
  ) {
    return _DrawLineBezier(
      startPos,
      endPos,
      thick,
      color,
    );
  }

  late final _DrawLineBezierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector2, Vector2, ffi.Float, Color)>>('DrawLineBezier');
  late final _DrawLineBezier = _DrawLineBezierPtr.asFunction<
      void Function(Vector2, Vector2, double, Color)>();

  void DrawCircle(
    int centerX,
    int centerY,
    double radius,
    Color color,
  ) {
    return _DrawCircle(
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _DrawCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Float, Color)>>('DrawCircle');
  late final _DrawCircle =
      _DrawCirclePtr.asFunction<void Function(int, int, double, Color)>();

  void DrawCircleSector(
    Vector2 center,
    double radius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawCircleSector(
      center,
      radius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawCircleSectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCircleSector');
  late final _DrawCircleSector = _DrawCircleSectorPtr.asFunction<
      void Function(Vector2, double, double, double, int, Color)>();

  void DrawCircleSectorLines(
    Vector2 center,
    double radius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawCircleSectorLines(
      center,
      radius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawCircleSectorLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCircleSectorLines');
  late final _DrawCircleSectorLines = _DrawCircleSectorLinesPtr.asFunction<
      void Function(Vector2, double, double, double, int, Color)>();

  void DrawCircleGradient(
    int centerX,
    int centerY,
    double radius,
    Color color1,
    Color color2,
  ) {
    return _DrawCircleGradient(
      centerX,
      centerY,
      radius,
      color1,
      color2,
    );
  }

  late final _DrawCircleGradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Float, Color,
              Color)>>('DrawCircleGradient');
  late final _DrawCircleGradient = _DrawCircleGradientPtr.asFunction<
      void Function(int, int, double, Color, Color)>();

  void DrawCircleV(
    Vector2 center,
    double radius,
    Color color,
  ) {
    return _DrawCircleV(
      center,
      radius,
      color,
    );
  }

  late final _DrawCircleVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector2, ffi.Float, Color)>>(
          'DrawCircleV');
  late final _DrawCircleV =
      _DrawCircleVPtr.asFunction<void Function(Vector2, double, Color)>();

  void DrawCircleLines(
    int centerX,
    int centerY,
    double radius,
    Color color,
  ) {
    return _DrawCircleLines(
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _DrawCircleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Float, Color)>>('DrawCircleLines');
  late final _DrawCircleLines =
      _DrawCircleLinesPtr.asFunction<void Function(int, int, double, Color)>();

  void DrawCircleLinesV(
    Vector2 center,
    double radius,
    Color color,
  ) {
    return _DrawCircleLinesV(
      center,
      radius,
      color,
    );
  }

  late final _DrawCircleLinesVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector2, ffi.Float, Color)>>(
          'DrawCircleLinesV');
  late final _DrawCircleLinesV =
      _DrawCircleLinesVPtr.asFunction<void Function(Vector2, double, Color)>();

  void DrawEllipse(
    int centerX,
    int centerY,
    double radiusH,
    double radiusV,
    Color color,
  ) {
    return _DrawEllipse(
      centerX,
      centerY,
      radiusH,
      radiusV,
      color,
    );
  }

  late final _DrawEllipsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Float, ffi.Float, Color)>>('DrawEllipse');
  late final _DrawEllipse = _DrawEllipsePtr.asFunction<
      void Function(int, int, double, double, Color)>();

  void DrawEllipseLines(
    int centerX,
    int centerY,
    double radiusH,
    double radiusV,
    Color color,
  ) {
    return _DrawEllipseLines(
      centerX,
      centerY,
      radiusH,
      radiusV,
      color,
    );
  }

  late final _DrawEllipseLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Float, ffi.Float,
              Color)>>('DrawEllipseLines');
  late final _DrawEllipseLines = _DrawEllipseLinesPtr.asFunction<
      void Function(int, int, double, double, Color)>();

  void DrawRing(
    Vector2 center,
    double innerRadius,
    double outerRadius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawRing(
      center,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawRingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, ffi.Float, ffi.Float, ffi.Float, ffi.Float,
              ffi.Int, Color)>>('DrawRing');
  late final _DrawRing = _DrawRingPtr.asFunction<
      void Function(Vector2, double, double, double, double, int, Color)>();

  void DrawRingLines(
    Vector2 center,
    double innerRadius,
    double outerRadius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawRingLines(
      center,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawRingLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, ffi.Float, ffi.Float, ffi.Float, ffi.Float,
              ffi.Int, Color)>>('DrawRingLines');
  late final _DrawRingLines = _DrawRingLinesPtr.asFunction<
      void Function(Vector2, double, double, double, double, int, Color)>();

  void DrawRectangle(
    int posX,
    int posY,
    int width,
    int height,
    Color color,
  ) {
    return _DrawRectangle(
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _DrawRectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int, Color)>>('DrawRectangle');
  late final _DrawRectangle =
      _DrawRectanglePtr.asFunction<void Function(int, int, int, int, Color)>();

  void DrawRectangleV(
    Vector2 position,
    Vector2 size,
    Color color,
  ) {
    return _DrawRectangleV(
      position,
      size,
      color,
    );
  }

  late final _DrawRectangleVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector2, Vector2, Color)>>(
          'DrawRectangleV');
  late final _DrawRectangleV =
      _DrawRectangleVPtr.asFunction<void Function(Vector2, Vector2, Color)>();

  void DrawRectangleRec(
    Rectangle rec,
    Color color,
  ) {
    return _DrawRectangleRec(
      rec,
      color,
    );
  }

  late final _DrawRectangleRecPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Rectangle, Color)>>(
          'DrawRectangleRec');
  late final _DrawRectangleRec =
      _DrawRectangleRecPtr.asFunction<void Function(Rectangle, Color)>();

  void DrawRectanglePro(
    Rectangle rec,
    Vector2 origin,
    double rotation,
    Color color,
  ) {
    return _DrawRectanglePro(
      rec,
      origin,
      rotation,
      color,
    );
  }

  late final _DrawRectangleProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Rectangle, Vector2, ffi.Float, Color)>>('DrawRectanglePro');
  late final _DrawRectanglePro = _DrawRectangleProPtr.asFunction<
      void Function(Rectangle, Vector2, double, Color)>();

  void DrawRectangleGradientV(
    int posX,
    int posY,
    int width,
    int height,
    Color color1,
    Color color2,
  ) {
    return _DrawRectangleGradientV(
      posX,
      posY,
      width,
      height,
      color1,
      color2,
    );
  }

  late final _DrawRectangleGradientVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, Color,
              Color)>>('DrawRectangleGradientV');
  late final _DrawRectangleGradientV = _DrawRectangleGradientVPtr.asFunction<
      void Function(int, int, int, int, Color, Color)>();

  void DrawRectangleGradientH(
    int posX,
    int posY,
    int width,
    int height,
    Color color1,
    Color color2,
  ) {
    return _DrawRectangleGradientH(
      posX,
      posY,
      width,
      height,
      color1,
      color2,
    );
  }

  late final _DrawRectangleGradientHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, Color,
              Color)>>('DrawRectangleGradientH');
  late final _DrawRectangleGradientH = _DrawRectangleGradientHPtr.asFunction<
      void Function(int, int, int, int, Color, Color)>();

  void DrawRectangleGradientEx(
    Rectangle rec,
    Color col1,
    Color col2,
    Color col3,
    Color col4,
  ) {
    return _DrawRectangleGradientEx(
      rec,
      col1,
      col2,
      col3,
      col4,
    );
  }

  late final _DrawRectangleGradientExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Rectangle, Color, Color, Color,
              Color)>>('DrawRectangleGradientEx');
  late final _DrawRectangleGradientEx = _DrawRectangleGradientExPtr.asFunction<
      void Function(Rectangle, Color, Color, Color, Color)>();

  void DrawRectangleLines(
    int posX,
    int posY,
    int width,
    int height,
    Color color,
  ) {
    return _DrawRectangleLines(
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _DrawRectangleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              Color)>>('DrawRectangleLines');
  late final _DrawRectangleLines = _DrawRectangleLinesPtr.asFunction<
      void Function(int, int, int, int, Color)>();

  void DrawRectangleLinesEx(
    Rectangle rec,
    double lineThick,
    Color color,
  ) {
    return _DrawRectangleLinesEx(
      rec,
      lineThick,
      color,
    );
  }

  late final _DrawRectangleLinesExPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Rectangle, ffi.Float, Color)>>(
      'DrawRectangleLinesEx');
  late final _DrawRectangleLinesEx = _DrawRectangleLinesExPtr.asFunction<
      void Function(Rectangle, double, Color)>();

  void DrawRectangleRounded(
    Rectangle rec,
    double roundness,
    int segments,
    Color color,
  ) {
    return _DrawRectangleRounded(
      rec,
      roundness,
      segments,
      color,
    );
  }

  late final _DrawRectangleRoundedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Rectangle, ffi.Float, ffi.Int, Color)>>('DrawRectangleRounded');
  late final _DrawRectangleRounded = _DrawRectangleRoundedPtr.asFunction<
      void Function(Rectangle, double, int, Color)>();

  void DrawRectangleRoundedLines(
    Rectangle rec,
    double roundness,
    int segments,
    double lineThick,
    Color color,
  ) {
    return _DrawRectangleRoundedLines(
      rec,
      roundness,
      segments,
      lineThick,
      color,
    );
  }

  late final _DrawRectangleRoundedLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Rectangle, ffi.Float, ffi.Int, ffi.Float,
              Color)>>('DrawRectangleRoundedLines');
  late final _DrawRectangleRoundedLines = _DrawRectangleRoundedLinesPtr
      .asFunction<void Function(Rectangle, double, int, double, Color)>();

  void DrawTriangle(
    Vector2 v1,
    Vector2 v2,
    Vector2 v3,
    Color color,
  ) {
    return _DrawTriangle(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTrianglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, Vector2, Color)>>('DrawTriangle');
  late final _DrawTriangle = _DrawTrianglePtr.asFunction<
      void Function(Vector2, Vector2, Vector2, Color)>();

  void DrawTriangleLines(
    Vector2 v1,
    Vector2 v2,
    Vector2 v3,
    Color color,
  ) {
    return _DrawTriangleLines(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTriangleLinesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Vector2, Vector2, Vector2, Color)>>(
      'DrawTriangleLines');
  late final _DrawTriangleLines = _DrawTriangleLinesPtr.asFunction<
      void Function(Vector2, Vector2, Vector2, Color)>();

  void DrawTriangleFan(
    ffi.Pointer<Vector2> points,
    int pointCount,
    Color color,
  ) {
    return _DrawTriangleFan(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleFanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Vector2>, ffi.Int, Color)>>('DrawTriangleFan');
  late final _DrawTriangleFan = _DrawTriangleFanPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, Color)>();

  void DrawTriangleStrip(
    ffi.Pointer<Vector2> points,
    int pointCount,
    Color color,
  ) {
    return _DrawTriangleStrip(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleStripPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Vector2>, ffi.Int, Color)>>('DrawTriangleStrip');
  late final _DrawTriangleStrip = _DrawTriangleStripPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, Color)>();

  void DrawPoly(
    Vector2 center,
    int sides,
    double radius,
    double rotation,
    Color color,
  ) {
    return _DrawPoly(
      center,
      sides,
      radius,
      rotation,
      color,
    );
  }

  late final _DrawPolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector2, ffi.Int, ffi.Float, ffi.Float, Color)>>('DrawPoly');
  late final _DrawPoly = _DrawPolyPtr.asFunction<
      void Function(Vector2, int, double, double, Color)>();

  void DrawPolyLines(
    Vector2 center,
    int sides,
    double radius,
    double rotation,
    Color color,
  ) {
    return _DrawPolyLines(
      center,
      sides,
      radius,
      rotation,
      color,
    );
  }

  late final _DrawPolyLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector2, ffi.Int, ffi.Float, ffi.Float, Color)>>('DrawPolyLines');
  late final _DrawPolyLines = _DrawPolyLinesPtr.asFunction<
      void Function(Vector2, int, double, double, Color)>();

  void DrawPolyLinesEx(
    Vector2 center,
    int sides,
    double radius,
    double rotation,
    double lineThick,
    Color color,
  ) {
    return _DrawPolyLinesEx(
      center,
      sides,
      radius,
      rotation,
      lineThick,
      color,
    );
  }

  late final _DrawPolyLinesExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, ffi.Int, ffi.Float, ffi.Float, ffi.Float,
              Color)>>('DrawPolyLinesEx');
  late final _DrawPolyLinesEx = _DrawPolyLinesExPtr.asFunction<
      void Function(Vector2, int, double, double, double, Color)>();

  void DrawSplineLinear(
    ffi.Pointer<Vector2> points,
    int pointCount,
    double thick,
    Color color,
  ) {
    return _DrawSplineLinear(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineLinearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Vector2>, ffi.Int, ffi.Float,
              Color)>>('DrawSplineLinear');
  late final _DrawSplineLinear = _DrawSplineLinearPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, double, Color)>();

  void DrawSplineBasis(
    ffi.Pointer<Vector2> points,
    int pointCount,
    double thick,
    Color color,
  ) {
    return _DrawSplineBasis(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineBasisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Vector2>, ffi.Int, ffi.Float,
              Color)>>('DrawSplineBasis');
  late final _DrawSplineBasis = _DrawSplineBasisPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, double, Color)>();

  void DrawSplineCatmullRom(
    ffi.Pointer<Vector2> points,
    int pointCount,
    double thick,
    Color color,
  ) {
    return _DrawSplineCatmullRom(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineCatmullRomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Vector2>, ffi.Int, ffi.Float,
              Color)>>('DrawSplineCatmullRom');
  late final _DrawSplineCatmullRom = _DrawSplineCatmullRomPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, double, Color)>();

  void DrawSplineBezierQuadratic(
    ffi.Pointer<Vector2> points,
    int pointCount,
    double thick,
    Color color,
  ) {
    return _DrawSplineBezierQuadratic(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineBezierQuadraticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Vector2>, ffi.Int, ffi.Float,
              Color)>>('DrawSplineBezierQuadratic');
  late final _DrawSplineBezierQuadratic = _DrawSplineBezierQuadraticPtr
      .asFunction<void Function(ffi.Pointer<Vector2>, int, double, Color)>();

  void DrawSplineBezierCubic(
    ffi.Pointer<Vector2> points,
    int pointCount,
    double thick,
    Color color,
  ) {
    return _DrawSplineBezierCubic(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineBezierCubicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Vector2>, ffi.Int, ffi.Float,
              Color)>>('DrawSplineBezierCubic');
  late final _DrawSplineBezierCubic = _DrawSplineBezierCubicPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, double, Color)>();

  void DrawSplineSegmentLinear(
    Vector2 p1,
    Vector2 p2,
    double thick,
    Color color,
  ) {
    return _DrawSplineSegmentLinear(
      p1,
      p2,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentLinearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector2, Vector2, ffi.Float, Color)>>('DrawSplineSegmentLinear');
  late final _DrawSplineSegmentLinear = _DrawSplineSegmentLinearPtr.asFunction<
      void Function(Vector2, Vector2, double, Color)>();

  void DrawSplineSegmentBasis(
    Vector2 p1,
    Vector2 p2,
    Vector2 p3,
    Vector2 p4,
    double thick,
    Color color,
  ) {
    return _DrawSplineSegmentBasis(
      p1,
      p2,
      p3,
      p4,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentBasisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, Vector2, Vector2, ffi.Float,
              Color)>>('DrawSplineSegmentBasis');
  late final _DrawSplineSegmentBasis = _DrawSplineSegmentBasisPtr.asFunction<
      void Function(Vector2, Vector2, Vector2, Vector2, double, Color)>();

  void DrawSplineSegmentCatmullRom(
    Vector2 p1,
    Vector2 p2,
    Vector2 p3,
    Vector2 p4,
    double thick,
    Color color,
  ) {
    return _DrawSplineSegmentCatmullRom(
      p1,
      p2,
      p3,
      p4,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentCatmullRomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, Vector2, Vector2, ffi.Float,
              Color)>>('DrawSplineSegmentCatmullRom');
  late final _DrawSplineSegmentCatmullRom =
      _DrawSplineSegmentCatmullRomPtr.asFunction<
          void Function(Vector2, Vector2, Vector2, Vector2, double, Color)>();

  void DrawSplineSegmentBezierQuadratic(
    Vector2 p1,
    Vector2 c2,
    Vector2 p3,
    double thick,
    Color color,
  ) {
    return _DrawSplineSegmentBezierQuadratic(
      p1,
      c2,
      p3,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentBezierQuadraticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, Vector2, ffi.Float,
              Color)>>('DrawSplineSegmentBezierQuadratic');
  late final _DrawSplineSegmentBezierQuadratic =
      _DrawSplineSegmentBezierQuadraticPtr.asFunction<
          void Function(Vector2, Vector2, Vector2, double, Color)>();

  void DrawSplineSegmentBezierCubic(
    Vector2 p1,
    Vector2 c2,
    Vector2 c3,
    Vector2 p4,
    double thick,
    Color color,
  ) {
    return _DrawSplineSegmentBezierCubic(
      p1,
      c2,
      c3,
      p4,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentBezierCubicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, Vector2, Vector2, ffi.Float,
              Color)>>('DrawSplineSegmentBezierCubic');
  late final _DrawSplineSegmentBezierCubic =
      _DrawSplineSegmentBezierCubicPtr.asFunction<
          void Function(Vector2, Vector2, Vector2, Vector2, double, Color)>();

  Vector2 GetSplinePointLinear(
    Vector2 startPos,
    Vector2 endPos,
    double t,
  ) {
    return _GetSplinePointLinear(
      startPos,
      endPos,
      t,
    );
  }

  late final _GetSplinePointLinearPtr = _lookup<
          ffi.NativeFunction<Vector2 Function(Vector2, Vector2, ffi.Float)>>(
      'GetSplinePointLinear');
  late final _GetSplinePointLinear = _GetSplinePointLinearPtr.asFunction<
      Vector2 Function(Vector2, Vector2, double)>();

  Vector2 GetSplinePointBasis(
    Vector2 p1,
    Vector2 p2,
    Vector2 p3,
    Vector2 p4,
    double t,
  ) {
    return _GetSplinePointBasis(
      p1,
      p2,
      p3,
      p4,
      t,
    );
  }

  late final _GetSplinePointBasisPtr = _lookup<
      ffi.NativeFunction<
          Vector2 Function(Vector2, Vector2, Vector2, Vector2,
              ffi.Float)>>('GetSplinePointBasis');
  late final _GetSplinePointBasis = _GetSplinePointBasisPtr.asFunction<
      Vector2 Function(Vector2, Vector2, Vector2, Vector2, double)>();

  Vector2 GetSplinePointCatmullRom(
    Vector2 p1,
    Vector2 p2,
    Vector2 p3,
    Vector2 p4,
    double t,
  ) {
    return _GetSplinePointCatmullRom(
      p1,
      p2,
      p3,
      p4,
      t,
    );
  }

  late final _GetSplinePointCatmullRomPtr = _lookup<
      ffi.NativeFunction<
          Vector2 Function(Vector2, Vector2, Vector2, Vector2,
              ffi.Float)>>('GetSplinePointCatmullRom');
  late final _GetSplinePointCatmullRom =
      _GetSplinePointCatmullRomPtr.asFunction<
          Vector2 Function(Vector2, Vector2, Vector2, Vector2, double)>();

  Vector2 GetSplinePointBezierQuad(
    Vector2 p1,
    Vector2 c2,
    Vector2 p3,
    double t,
  ) {
    return _GetSplinePointBezierQuad(
      p1,
      c2,
      p3,
      t,
    );
  }

  late final _GetSplinePointBezierQuadPtr = _lookup<
      ffi.NativeFunction<
          Vector2 Function(Vector2, Vector2, Vector2,
              ffi.Float)>>('GetSplinePointBezierQuad');
  late final _GetSplinePointBezierQuad = _GetSplinePointBezierQuadPtr
      .asFunction<Vector2 Function(Vector2, Vector2, Vector2, double)>();

  Vector2 GetSplinePointBezierCubic(
    Vector2 p1,
    Vector2 c2,
    Vector2 c3,
    Vector2 p4,
    double t,
  ) {
    return _GetSplinePointBezierCubic(
      p1,
      c2,
      c3,
      p4,
      t,
    );
  }

  late final _GetSplinePointBezierCubicPtr = _lookup<
      ffi.NativeFunction<
          Vector2 Function(Vector2, Vector2, Vector2, Vector2,
              ffi.Float)>>('GetSplinePointBezierCubic');
  late final _GetSplinePointBezierCubic =
      _GetSplinePointBezierCubicPtr.asFunction<
          Vector2 Function(Vector2, Vector2, Vector2, Vector2, double)>();

  bool CheckCollisionRecs(
    Rectangle rec1,
    Rectangle rec2,
  ) {
    return _CheckCollisionRecs(
      rec1,
      rec2,
    );
  }

  late final _CheckCollisionRecsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Rectangle, Rectangle)>>(
          'CheckCollisionRecs');
  late final _CheckCollisionRecs =
      _CheckCollisionRecsPtr.asFunction<bool Function(Rectangle, Rectangle)>();

  bool CheckCollisionCircles(
    Vector2 center1,
    double radius1,
    Vector2 center2,
    double radius2,
  ) {
    return _CheckCollisionCircles(
      center1,
      radius1,
      center2,
      radius2,
    );
  }

  late final _CheckCollisionCirclesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Vector2, ffi.Float, Vector2,
              ffi.Float)>>('CheckCollisionCircles');
  late final _CheckCollisionCircles = _CheckCollisionCirclesPtr.asFunction<
      bool Function(Vector2, double, Vector2, double)>();

  bool CheckCollisionCircleRec(
    Vector2 center,
    double radius,
    Rectangle rec,
  ) {
    return _CheckCollisionCircleRec(
      center,
      radius,
      rec,
    );
  }

  late final _CheckCollisionCircleRecPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Vector2, ffi.Float, Rectangle)>>(
      'CheckCollisionCircleRec');
  late final _CheckCollisionCircleRec = _CheckCollisionCircleRecPtr.asFunction<
      bool Function(Vector2, double, Rectangle)>();

  bool CheckCollisionPointRec(
    Vector2 point,
    Rectangle rec,
  ) {
    return _CheckCollisionPointRec(
      point,
      rec,
    );
  }

  late final _CheckCollisionPointRecPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Vector2, Rectangle)>>(
          'CheckCollisionPointRec');
  late final _CheckCollisionPointRec = _CheckCollisionPointRecPtr.asFunction<
      bool Function(Vector2, Rectangle)>();

  bool CheckCollisionPointCircle(
    Vector2 point,
    Vector2 center,
    double radius,
  ) {
    return _CheckCollisionPointCircle(
      point,
      center,
      radius,
    );
  }

  late final _CheckCollisionPointCirclePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Vector2, Vector2, ffi.Float)>>(
      'CheckCollisionPointCircle');
  late final _CheckCollisionPointCircle = _CheckCollisionPointCirclePtr
      .asFunction<bool Function(Vector2, Vector2, double)>();

  bool CheckCollisionPointTriangle(
    Vector2 point,
    Vector2 p1,
    Vector2 p2,
    Vector2 p3,
  ) {
    return _CheckCollisionPointTriangle(
      point,
      p1,
      p2,
      p3,
    );
  }

  late final _CheckCollisionPointTrianglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Vector2, Vector2, Vector2,
              Vector2)>>('CheckCollisionPointTriangle');
  late final _CheckCollisionPointTriangle = _CheckCollisionPointTrianglePtr
      .asFunction<bool Function(Vector2, Vector2, Vector2, Vector2)>();

  bool CheckCollisionPointPoly(
    Vector2 point,
    ffi.Pointer<Vector2> points,
    int pointCount,
  ) {
    return _CheckCollisionPointPoly(
      point,
      points,
      pointCount,
    );
  }

  late final _CheckCollisionPointPolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Vector2, ffi.Pointer<Vector2>,
              ffi.Int)>>('CheckCollisionPointPoly');
  late final _CheckCollisionPointPoly = _CheckCollisionPointPolyPtr.asFunction<
      bool Function(Vector2, ffi.Pointer<Vector2>, int)>();

  bool CheckCollisionLines(
    Vector2 startPos1,
    Vector2 endPos1,
    Vector2 startPos2,
    Vector2 endPos2,
    ffi.Pointer<Vector2> collisionPoint,
  ) {
    return _CheckCollisionLines(
      startPos1,
      endPos1,
      startPos2,
      endPos2,
      collisionPoint,
    );
  }

  late final _CheckCollisionLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Vector2, Vector2, Vector2, Vector2,
              ffi.Pointer<Vector2>)>>('CheckCollisionLines');
  late final _CheckCollisionLines = _CheckCollisionLinesPtr.asFunction<
      bool Function(
          Vector2, Vector2, Vector2, Vector2, ffi.Pointer<Vector2>)>();

  bool CheckCollisionPointLine(
    Vector2 point,
    Vector2 p1,
    Vector2 p2,
    int threshold,
  ) {
    return _CheckCollisionPointLine(
      point,
      p1,
      p2,
      threshold,
    );
  }

  late final _CheckCollisionPointLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              Vector2, Vector2, Vector2, ffi.Int)>>('CheckCollisionPointLine');
  late final _CheckCollisionPointLine = _CheckCollisionPointLinePtr.asFunction<
      bool Function(Vector2, Vector2, Vector2, int)>();

  Rectangle GetCollisionRec(
    Rectangle rec1,
    Rectangle rec2,
  ) {
    return _GetCollisionRec(
      rec1,
      rec2,
    );
  }

  late final _GetCollisionRecPtr =
      _lookup<ffi.NativeFunction<Rectangle Function(Rectangle, Rectangle)>>(
          'GetCollisionRec');
  late final _GetCollisionRec = _GetCollisionRecPtr.asFunction<
      Rectangle Function(Rectangle, Rectangle)>();

  Image LoadImage(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadImage(
      fileName,
    );
  }

  late final _LoadImagePtr =
      _lookup<ffi.NativeFunction<Image Function(ffi.Pointer<ffi.Char>)>>(
          'LoadImage');
  late final _LoadImage =
      _LoadImagePtr.asFunction<Image Function(ffi.Pointer<ffi.Char>)>();

  Image LoadImageRaw(
    ffi.Pointer<ffi.Char> fileName,
    int width,
    int height,
    int format,
    int headerSize,
  ) {
    return _LoadImageRaw(
      fileName,
      width,
      height,
      format,
      headerSize,
    );
  }

  late final _LoadImageRawPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('LoadImageRaw');
  late final _LoadImageRaw = _LoadImageRawPtr.asFunction<
      Image Function(ffi.Pointer<ffi.Char>, int, int, int, int)>();

  Image LoadImageSvg(
    ffi.Pointer<ffi.Char> fileNameOrString,
    int width,
    int height,
  ) {
    return _LoadImageSvg(
      fileNameOrString,
      width,
      height,
    );
  }

  late final _LoadImageSvgPtr = _lookup<
      ffi.NativeFunction<
          Image Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('LoadImageSvg');
  late final _LoadImageSvg = _LoadImageSvgPtr.asFunction<
      Image Function(ffi.Pointer<ffi.Char>, int, int)>();

  Image LoadImageAnim(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> frames,
  ) {
    return _LoadImageAnim(
      fileName,
      frames,
    );
  }

  late final _LoadImageAnimPtr = _lookup<
      ffi.NativeFunction<
          Image Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadImageAnim');
  late final _LoadImageAnim = _LoadImageAnimPtr.asFunction<
      Image Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  Image LoadImageFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
  ) {
    return _LoadImageFromMemory(
      fileType,
      fileData,
      dataSize,
    );
  }

  late final _LoadImageFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('LoadImageFromMemory');
  late final _LoadImageFromMemory = _LoadImageFromMemoryPtr.asFunction<
      Image Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  Image LoadImageFromTexture(
    Texture2D texture,
  ) {
    return _LoadImageFromTexture(
      texture,
    );
  }

  late final _LoadImageFromTexturePtr =
      _lookup<ffi.NativeFunction<Image Function(Texture2D)>>(
          'LoadImageFromTexture');
  late final _LoadImageFromTexture =
      _LoadImageFromTexturePtr.asFunction<Image Function(Texture2D)>();

  Image LoadImageFromScreen() {
    return _LoadImageFromScreen();
  }

  late final _LoadImageFromScreenPtr =
      _lookup<ffi.NativeFunction<Image Function()>>('LoadImageFromScreen');
  late final _LoadImageFromScreen =
      _LoadImageFromScreenPtr.asFunction<Image Function()>();

  bool IsImageReady(
    Image image,
  ) {
    return _IsImageReady(
      image,
    );
  }

  late final _IsImageReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Image)>>('IsImageReady');
  late final _IsImageReady =
      _IsImageReadyPtr.asFunction<bool Function(Image)>();

  void UnloadImage(
    Image image,
  ) {
    return _UnloadImage(
      image,
    );
  }

  late final _UnloadImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Image)>>('UnloadImage');
  late final _UnloadImage = _UnloadImagePtr.asFunction<void Function(Image)>();

  bool ExportImage(
    Image image,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportImage(
      image,
      fileName,
    );
  }

  late final _ExportImagePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Image, ffi.Pointer<ffi.Char>)>>(
      'ExportImage');
  late final _ExportImage =
      _ExportImagePtr.asFunction<bool Function(Image, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedChar> ExportImageToMemory(
    Image image,
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.Int> fileSize,
  ) {
    return _ExportImageToMemory(
      image,
      fileType,
      fileSize,
    );
  }

  late final _ExportImageToMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(Image, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('ExportImageToMemory');
  late final _ExportImageToMemory = _ExportImageToMemoryPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          Image, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  bool ExportImageAsCode(
    Image image,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportImageAsCode(
      image,
      fileName,
    );
  }

  late final _ExportImageAsCodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Image, ffi.Pointer<ffi.Char>)>>(
      'ExportImageAsCode');
  late final _ExportImageAsCode = _ExportImageAsCodePtr.asFunction<
      bool Function(Image, ffi.Pointer<ffi.Char>)>();

  Image GenImageColor(
    int width,
    int height,
    Color color,
  ) {
    return _GenImageColor(
      width,
      height,
      color,
    );
  }

  late final _GenImageColorPtr =
      _lookup<ffi.NativeFunction<Image Function(ffi.Int, ffi.Int, Color)>>(
          'GenImageColor');
  late final _GenImageColor =
      _GenImageColorPtr.asFunction<Image Function(int, int, Color)>();

  Image GenImageGradientLinear(
    int width,
    int height,
    int direction,
    Color start,
    Color end,
  ) {
    return _GenImageGradientLinear(
      width,
      height,
      direction,
      start,
      end,
    );
  }

  late final _GenImageGradientLinearPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Int, ffi.Int, ffi.Int, Color,
              Color)>>('GenImageGradientLinear');
  late final _GenImageGradientLinear = _GenImageGradientLinearPtr.asFunction<
      Image Function(int, int, int, Color, Color)>();

  Image GenImageGradientRadial(
    int width,
    int height,
    double density,
    Color inner,
    Color outer,
  ) {
    return _GenImageGradientRadial(
      width,
      height,
      density,
      inner,
      outer,
    );
  }

  late final _GenImageGradientRadialPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Int, ffi.Int, ffi.Float, Color,
              Color)>>('GenImageGradientRadial');
  late final _GenImageGradientRadial = _GenImageGradientRadialPtr.asFunction<
      Image Function(int, int, double, Color, Color)>();

  Image GenImageGradientSquare(
    int width,
    int height,
    double density,
    Color inner,
    Color outer,
  ) {
    return _GenImageGradientSquare(
      width,
      height,
      density,
      inner,
      outer,
    );
  }

  late final _GenImageGradientSquarePtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Int, ffi.Int, ffi.Float, Color,
              Color)>>('GenImageGradientSquare');
  late final _GenImageGradientSquare = _GenImageGradientSquarePtr.asFunction<
      Image Function(int, int, double, Color, Color)>();

  Image GenImageChecked(
    int width,
    int height,
    int checksX,
    int checksY,
    Color col1,
    Color col2,
  ) {
    return _GenImageChecked(
      width,
      height,
      checksX,
      checksY,
      col1,
      col2,
    );
  }

  late final _GenImageCheckedPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, Color,
              Color)>>('GenImageChecked');
  late final _GenImageChecked = _GenImageCheckedPtr.asFunction<
      Image Function(int, int, int, int, Color, Color)>();

  Image GenImageWhiteNoise(
    int width,
    int height,
    double factor,
  ) {
    return _GenImageWhiteNoise(
      width,
      height,
      factor,
    );
  }

  late final _GenImageWhiteNoisePtr =
      _lookup<ffi.NativeFunction<Image Function(ffi.Int, ffi.Int, ffi.Float)>>(
          'GenImageWhiteNoise');
  late final _GenImageWhiteNoise =
      _GenImageWhiteNoisePtr.asFunction<Image Function(int, int, double)>();

  Image GenImagePerlinNoise(
    int width,
    int height,
    int offsetX,
    int offsetY,
    double scale,
  ) {
    return _GenImagePerlinNoise(
      width,
      height,
      offsetX,
      offsetY,
      scale,
    );
  }

  late final _GenImagePerlinNoisePtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Float)>>('GenImagePerlinNoise');
  late final _GenImagePerlinNoise = _GenImagePerlinNoisePtr.asFunction<
      Image Function(int, int, int, int, double)>();

  Image GenImageCellular(
    int width,
    int height,
    int tileSize,
  ) {
    return _GenImageCellular(
      width,
      height,
      tileSize,
    );
  }

  late final _GenImageCellularPtr =
      _lookup<ffi.NativeFunction<Image Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'GenImageCellular');
  late final _GenImageCellular =
      _GenImageCellularPtr.asFunction<Image Function(int, int, int)>();

  Image GenImageText(
    int width,
    int height,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _GenImageText(
      width,
      height,
      text,
    );
  }

  late final _GenImageTextPtr = _lookup<
      ffi.NativeFunction<
          Image Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('GenImageText');
  late final _GenImageText = _GenImageTextPtr.asFunction<
      Image Function(int, int, ffi.Pointer<ffi.Char>)>();

  Image ImageCopy(
    Image image,
  ) {
    return _ImageCopy(
      image,
    );
  }

  late final _ImageCopyPtr =
      _lookup<ffi.NativeFunction<Image Function(Image)>>('ImageCopy');
  late final _ImageCopy = _ImageCopyPtr.asFunction<Image Function(Image)>();

  Image ImageFromImage(
    Image image,
    Rectangle rec,
  ) {
    return _ImageFromImage(
      image,
      rec,
    );
  }

  late final _ImageFromImagePtr =
      _lookup<ffi.NativeFunction<Image Function(Image, Rectangle)>>(
          'ImageFromImage');
  late final _ImageFromImage =
      _ImageFromImagePtr.asFunction<Image Function(Image, Rectangle)>();

  Image ImageText(
    ffi.Pointer<ffi.Char> text,
    int fontSize,
    Color color,
  ) {
    return _ImageText(
      text,
      fontSize,
      color,
    );
  }

  late final _ImageTextPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Pointer<ffi.Char>, ffi.Int, Color)>>('ImageText');
  late final _ImageText = _ImageTextPtr.asFunction<
      Image Function(ffi.Pointer<ffi.Char>, int, Color)>();

  Image ImageTextEx(
    Font font,
    ffi.Pointer<ffi.Char> text,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _ImageTextEx(
      font,
      text,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _ImageTextExPtr = _lookup<
      ffi.NativeFunction<
          Image Function(Font, ffi.Pointer<ffi.Char>, ffi.Float, ffi.Float,
              Color)>>('ImageTextEx');
  late final _ImageTextEx = _ImageTextExPtr.asFunction<
      Image Function(Font, ffi.Pointer<ffi.Char>, double, double, Color)>();

  void ImageFormat(
    ffi.Pointer<Image> image,
    int newFormat,
  ) {
    return _ImageFormat(
      image,
      newFormat,
    );
  }

  late final _ImageFormatPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int)>>(
      'ImageFormat');
  late final _ImageFormat =
      _ImageFormatPtr.asFunction<void Function(ffi.Pointer<Image>, int)>();

  void ImageToPOT(
    ffi.Pointer<Image> image,
    Color fill,
  ) {
    return _ImageToPOT(
      image,
      fill,
    );
  }

  late final _ImageToPOTPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Color)>>(
          'ImageToPOT');
  late final _ImageToPOT =
      _ImageToPOTPtr.asFunction<void Function(ffi.Pointer<Image>, Color)>();

  void ImageCrop(
    ffi.Pointer<Image> image,
    Rectangle crop,
  ) {
    return _ImageCrop(
      image,
      crop,
    );
  }

  late final _ImageCropPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Rectangle)>>(
      'ImageCrop');
  late final _ImageCrop =
      _ImageCropPtr.asFunction<void Function(ffi.Pointer<Image>, Rectangle)>();

  void ImageAlphaCrop(
    ffi.Pointer<Image> image,
    double threshold,
  ) {
    return _ImageAlphaCrop(
      image,
      threshold,
    );
  }

  late final _ImageAlphaCropPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Float)>>(
      'ImageAlphaCrop');
  late final _ImageAlphaCrop = _ImageAlphaCropPtr.asFunction<
      void Function(ffi.Pointer<Image>, double)>();

  void ImageAlphaClear(
    ffi.Pointer<Image> image,
    Color color,
    double threshold,
  ) {
    return _ImageAlphaClear(
      image,
      color,
      threshold,
    );
  }

  late final _ImageAlphaClearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, Color, ffi.Float)>>('ImageAlphaClear');
  late final _ImageAlphaClear = _ImageAlphaClearPtr.asFunction<
      void Function(ffi.Pointer<Image>, Color, double)>();

  void ImageAlphaMask(
    ffi.Pointer<Image> image,
    Image alphaMask,
  ) {
    return _ImageAlphaMask(
      image,
      alphaMask,
    );
  }

  late final _ImageAlphaMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Image)>>(
          'ImageAlphaMask');
  late final _ImageAlphaMask =
      _ImageAlphaMaskPtr.asFunction<void Function(ffi.Pointer<Image>, Image)>();

  void ImageAlphaPremultiply(
    ffi.Pointer<Image> image,
  ) {
    return _ImageAlphaPremultiply(
      image,
    );
  }

  late final _ImageAlphaPremultiplyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageAlphaPremultiply');
  late final _ImageAlphaPremultiply =
      _ImageAlphaPremultiplyPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageBlurGaussian(
    ffi.Pointer<Image> image,
    int blurSize,
  ) {
    return _ImageBlurGaussian(
      image,
      blurSize,
    );
  }

  late final _ImageBlurGaussianPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int)>>(
      'ImageBlurGaussian');
  late final _ImageBlurGaussian = _ImageBlurGaussianPtr.asFunction<
      void Function(ffi.Pointer<Image>, int)>();

  void ImageKernelConvolution(
    ffi.Pointer<Image> image,
    ffi.Pointer<ffi.Float> kernel,
    int kernelSize,
  ) {
    return _ImageKernelConvolution(
      image,
      kernel,
      kernelSize,
    );
  }

  late final _ImageKernelConvolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Float>,
              ffi.Int)>>('ImageKernelConvolution');
  late final _ImageKernelConvolution = _ImageKernelConvolutionPtr.asFunction<
      void Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Float>, int)>();

  void ImageResize(
    ffi.Pointer<Image> image,
    int newWidth,
    int newHeight,
  ) {
    return _ImageResize(
      image,
      newWidth,
      newHeight,
    );
  }

  late final _ImageResizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, ffi.Int, ffi.Int)>>('ImageResize');
  late final _ImageResize =
      _ImageResizePtr.asFunction<void Function(ffi.Pointer<Image>, int, int)>();

  void ImageResizeNN(
    ffi.Pointer<Image> image,
    int newWidth,
    int newHeight,
  ) {
    return _ImageResizeNN(
      image,
      newWidth,
      newHeight,
    );
  }

  late final _ImageResizeNNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, ffi.Int, ffi.Int)>>('ImageResizeNN');
  late final _ImageResizeNN = _ImageResizeNNPtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int)>();

  void ImageResizeCanvas(
    ffi.Pointer<Image> image,
    int newWidth,
    int newHeight,
    int offsetX,
    int offsetY,
    Color fill,
  ) {
    return _ImageResizeCanvas(
      image,
      newWidth,
      newHeight,
      offsetX,
      offsetY,
      fill,
    );
  }

  late final _ImageResizeCanvasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, Color)>>('ImageResizeCanvas');
  late final _ImageResizeCanvas = _ImageResizeCanvasPtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, int, Color)>();

  void ImageMipmaps(
    ffi.Pointer<Image> image,
  ) {
    return _ImageMipmaps(
      image,
    );
  }

  late final _ImageMipmapsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageMipmaps');
  late final _ImageMipmaps =
      _ImageMipmapsPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageDither(
    ffi.Pointer<Image> image,
    int rBpp,
    int gBpp,
    int bBpp,
    int aBpp,
  ) {
    return _ImageDither(
      image,
      rBpp,
      gBpp,
      bBpp,
      aBpp,
    );
  }

  late final _ImageDitherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('ImageDither');
  late final _ImageDither = _ImageDitherPtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, int)>();

  void ImageFlipVertical(
    ffi.Pointer<Image> image,
  ) {
    return _ImageFlipVertical(
      image,
    );
  }

  late final _ImageFlipVerticalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageFlipVertical');
  late final _ImageFlipVertical =
      _ImageFlipVerticalPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageFlipHorizontal(
    ffi.Pointer<Image> image,
  ) {
    return _ImageFlipHorizontal(
      image,
    );
  }

  late final _ImageFlipHorizontalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageFlipHorizontal');
  late final _ImageFlipHorizontal =
      _ImageFlipHorizontalPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageRotate(
    ffi.Pointer<Image> image,
    int degrees,
  ) {
    return _ImageRotate(
      image,
      degrees,
    );
  }

  late final _ImageRotatePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int)>>(
      'ImageRotate');
  late final _ImageRotate =
      _ImageRotatePtr.asFunction<void Function(ffi.Pointer<Image>, int)>();

  void ImageRotateCW(
    ffi.Pointer<Image> image,
  ) {
    return _ImageRotateCW(
      image,
    );
  }

  late final _ImageRotateCWPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageRotateCW');
  late final _ImageRotateCW =
      _ImageRotateCWPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageRotateCCW(
    ffi.Pointer<Image> image,
  ) {
    return _ImageRotateCCW(
      image,
    );
  }

  late final _ImageRotateCCWPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageRotateCCW');
  late final _ImageRotateCCW =
      _ImageRotateCCWPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageColorTint(
    ffi.Pointer<Image> image,
    Color color,
  ) {
    return _ImageColorTint(
      image,
      color,
    );
  }

  late final _ImageColorTintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Color)>>(
          'ImageColorTint');
  late final _ImageColorTint =
      _ImageColorTintPtr.asFunction<void Function(ffi.Pointer<Image>, Color)>();

  void ImageColorInvert(
    ffi.Pointer<Image> image,
  ) {
    return _ImageColorInvert(
      image,
    );
  }

  late final _ImageColorInvertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageColorInvert');
  late final _ImageColorInvert =
      _ImageColorInvertPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageColorGrayscale(
    ffi.Pointer<Image> image,
  ) {
    return _ImageColorGrayscale(
      image,
    );
  }

  late final _ImageColorGrayscalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageColorGrayscale');
  late final _ImageColorGrayscale =
      _ImageColorGrayscalePtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageColorContrast(
    ffi.Pointer<Image> image,
    double contrast,
  ) {
    return _ImageColorContrast(
      image,
      contrast,
    );
  }

  late final _ImageColorContrastPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Float)>>(
      'ImageColorContrast');
  late final _ImageColorContrast = _ImageColorContrastPtr.asFunction<
      void Function(ffi.Pointer<Image>, double)>();

  void ImageColorBrightness(
    ffi.Pointer<Image> image,
    int brightness,
  ) {
    return _ImageColorBrightness(
      image,
      brightness,
    );
  }

  late final _ImageColorBrightnessPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int)>>(
      'ImageColorBrightness');
  late final _ImageColorBrightness = _ImageColorBrightnessPtr.asFunction<
      void Function(ffi.Pointer<Image>, int)>();

  void ImageColorReplace(
    ffi.Pointer<Image> image,
    Color color,
    Color replace,
  ) {
    return _ImageColorReplace(
      image,
      color,
      replace,
    );
  }

  late final _ImageColorReplacePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Color, Color)>>(
      'ImageColorReplace');
  late final _ImageColorReplace = _ImageColorReplacePtr.asFunction<
      void Function(ffi.Pointer<Image>, Color, Color)>();

  ffi.Pointer<Color> LoadImageColors(
    Image image,
  ) {
    return _LoadImageColors(
      image,
    );
  }

  late final _LoadImageColorsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Color> Function(Image)>>(
          'LoadImageColors');
  late final _LoadImageColors =
      _LoadImageColorsPtr.asFunction<ffi.Pointer<Color> Function(Image)>();

  ffi.Pointer<Color> LoadImagePalette(
    Image image,
    int maxPaletteSize,
    ffi.Pointer<ffi.Int> colorCount,
  ) {
    return _LoadImagePalette(
      image,
      maxPaletteSize,
      colorCount,
    );
  }

  late final _LoadImagePalettePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Color> Function(
              Image, ffi.Int, ffi.Pointer<ffi.Int>)>>('LoadImagePalette');
  late final _LoadImagePalette = _LoadImagePalettePtr.asFunction<
      ffi.Pointer<Color> Function(Image, int, ffi.Pointer<ffi.Int>)>();

  void UnloadImageColors(
    ffi.Pointer<Color> colors,
  ) {
    return _UnloadImageColors(
      colors,
    );
  }

  late final _UnloadImageColorsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Color>)>>(
          'UnloadImageColors');
  late final _UnloadImageColors =
      _UnloadImageColorsPtr.asFunction<void Function(ffi.Pointer<Color>)>();

  void UnloadImagePalette(
    ffi.Pointer<Color> colors,
  ) {
    return _UnloadImagePalette(
      colors,
    );
  }

  late final _UnloadImagePalettePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Color>)>>(
          'UnloadImagePalette');
  late final _UnloadImagePalette =
      _UnloadImagePalettePtr.asFunction<void Function(ffi.Pointer<Color>)>();

  Rectangle GetImageAlphaBorder(
    Image image,
    double threshold,
  ) {
    return _GetImageAlphaBorder(
      image,
      threshold,
    );
  }

  late final _GetImageAlphaBorderPtr =
      _lookup<ffi.NativeFunction<Rectangle Function(Image, ffi.Float)>>(
          'GetImageAlphaBorder');
  late final _GetImageAlphaBorder =
      _GetImageAlphaBorderPtr.asFunction<Rectangle Function(Image, double)>();

  Color GetImageColor(
    Image image,
    int x,
    int y,
  ) {
    return _GetImageColor(
      image,
      x,
      y,
    );
  }

  late final _GetImageColorPtr =
      _lookup<ffi.NativeFunction<Color Function(Image, ffi.Int, ffi.Int)>>(
          'GetImageColor');
  late final _GetImageColor =
      _GetImageColorPtr.asFunction<Color Function(Image, int, int)>();

  void ImageClearBackground(
    ffi.Pointer<Image> dst,
    Color color,
  ) {
    return _ImageClearBackground(
      dst,
      color,
    );
  }

  late final _ImageClearBackgroundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Color)>>(
          'ImageClearBackground');
  late final _ImageClearBackground = _ImageClearBackgroundPtr.asFunction<
      void Function(ffi.Pointer<Image>, Color)>();

  void ImageDrawPixel(
    ffi.Pointer<Image> dst,
    int posX,
    int posY,
    Color color,
  ) {
    return _ImageDrawPixel(
      dst,
      posX,
      posY,
      color,
    );
  }

  late final _ImageDrawPixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, ffi.Int, ffi.Int, Color)>>('ImageDrawPixel');
  late final _ImageDrawPixel = _ImageDrawPixelPtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, Color)>();

  void ImageDrawPixelV(
    ffi.Pointer<Image> dst,
    Vector2 position,
    Color color,
  ) {
    return _ImageDrawPixelV(
      dst,
      position,
      color,
    );
  }

  late final _ImageDrawPixelVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, Vector2, Color)>>('ImageDrawPixelV');
  late final _ImageDrawPixelV = _ImageDrawPixelVPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, Color)>();

  void ImageDrawLine(
    ffi.Pointer<Image> dst,
    int startPosX,
    int startPosY,
    int endPosX,
    int endPosY,
    Color color,
  ) {
    return _ImageDrawLine(
      dst,
      startPosX,
      startPosY,
      endPosX,
      endPosY,
      color,
    );
  }

  late final _ImageDrawLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, Color)>>('ImageDrawLine');
  late final _ImageDrawLine = _ImageDrawLinePtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, int, Color)>();

  void ImageDrawLineV(
    ffi.Pointer<Image> dst,
    Vector2 start,
    Vector2 end,
    Color color,
  ) {
    return _ImageDrawLineV(
      dst,
      start,
      end,
      color,
    );
  }

  late final _ImageDrawLineVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, Vector2, Vector2, Color)>>('ImageDrawLineV');
  late final _ImageDrawLineV = _ImageDrawLineVPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, Vector2, Color)>();

  void ImageDrawCircle(
    ffi.Pointer<Image> dst,
    int centerX,
    int centerY,
    int radius,
    Color color,
  ) {
    return _ImageDrawCircle(
      dst,
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _ImageDrawCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              Color)>>('ImageDrawCircle');
  late final _ImageDrawCircle = _ImageDrawCirclePtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, Color)>();

  void ImageDrawCircleV(
    ffi.Pointer<Image> dst,
    Vector2 center,
    int radius,
    Color color,
  ) {
    return _ImageDrawCircleV(
      dst,
      center,
      radius,
      color,
    );
  }

  late final _ImageDrawCircleVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Vector2, ffi.Int,
              Color)>>('ImageDrawCircleV');
  late final _ImageDrawCircleV = _ImageDrawCircleVPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, int, Color)>();

  void ImageDrawCircleLines(
    ffi.Pointer<Image> dst,
    int centerX,
    int centerY,
    int radius,
    Color color,
  ) {
    return _ImageDrawCircleLines(
      dst,
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _ImageDrawCircleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              Color)>>('ImageDrawCircleLines');
  late final _ImageDrawCircleLines = _ImageDrawCircleLinesPtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, Color)>();

  void ImageDrawCircleLinesV(
    ffi.Pointer<Image> dst,
    Vector2 center,
    int radius,
    Color color,
  ) {
    return _ImageDrawCircleLinesV(
      dst,
      center,
      radius,
      color,
    );
  }

  late final _ImageDrawCircleLinesVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Vector2, ffi.Int,
              Color)>>('ImageDrawCircleLinesV');
  late final _ImageDrawCircleLinesV = _ImageDrawCircleLinesVPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, int, Color)>();

  void ImageDrawRectangle(
    ffi.Pointer<Image> dst,
    int posX,
    int posY,
    int width,
    int height,
    Color color,
  ) {
    return _ImageDrawRectangle(
      dst,
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _ImageDrawRectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, Color)>>('ImageDrawRectangle');
  late final _ImageDrawRectangle = _ImageDrawRectanglePtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, int, Color)>();

  void ImageDrawRectangleV(
    ffi.Pointer<Image> dst,
    Vector2 position,
    Vector2 size,
    Color color,
  ) {
    return _ImageDrawRectangleV(
      dst,
      position,
      size,
      color,
    );
  }

  late final _ImageDrawRectangleVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Vector2, Vector2,
              Color)>>('ImageDrawRectangleV');
  late final _ImageDrawRectangleV = _ImageDrawRectangleVPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, Vector2, Color)>();

  void ImageDrawRectangleRec(
    ffi.Pointer<Image> dst,
    Rectangle rec,
    Color color,
  ) {
    return _ImageDrawRectangleRec(
      dst,
      rec,
      color,
    );
  }

  late final _ImageDrawRectangleRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, Rectangle, Color)>>('ImageDrawRectangleRec');
  late final _ImageDrawRectangleRec = _ImageDrawRectangleRecPtr.asFunction<
      void Function(ffi.Pointer<Image>, Rectangle, Color)>();

  void ImageDrawRectangleLines(
    ffi.Pointer<Image> dst,
    Rectangle rec,
    int thick,
    Color color,
  ) {
    return _ImageDrawRectangleLines(
      dst,
      rec,
      thick,
      color,
    );
  }

  late final _ImageDrawRectangleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Rectangle, ffi.Int,
              Color)>>('ImageDrawRectangleLines');
  late final _ImageDrawRectangleLines = _ImageDrawRectangleLinesPtr.asFunction<
      void Function(ffi.Pointer<Image>, Rectangle, int, Color)>();

  void ImageDraw(
    ffi.Pointer<Image> dst,
    Image src,
    Rectangle srcRec,
    Rectangle dstRec,
    Color tint,
  ) {
    return _ImageDraw(
      dst,
      src,
      srcRec,
      dstRec,
      tint,
    );
  }

  late final _ImageDrawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Image, Rectangle, Rectangle,
              Color)>>('ImageDraw');
  late final _ImageDraw = _ImageDrawPtr.asFunction<
      void Function(ffi.Pointer<Image>, Image, Rectangle, Rectangle, Color)>();

  void ImageDrawText(
    ffi.Pointer<Image> dst,
    ffi.Pointer<ffi.Char> text,
    int posX,
    int posY,
    int fontSize,
    Color color,
  ) {
    return _ImageDrawText(
      dst,
      text,
      posX,
      posY,
      fontSize,
      color,
    );
  }

  late final _ImageDrawTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int, ffi.Int, Color)>>('ImageDrawText');
  late final _ImageDrawText = _ImageDrawTextPtr.asFunction<
      void Function(
          ffi.Pointer<Image>, ffi.Pointer<ffi.Char>, int, int, int, Color)>();

  void ImageDrawTextEx(
    ffi.Pointer<Image> dst,
    Font font,
    ffi.Pointer<ffi.Char> text,
    Vector2 position,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _ImageDrawTextEx(
      dst,
      font,
      text,
      position,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _ImageDrawTextExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Font, ffi.Pointer<ffi.Char>,
              Vector2, ffi.Float, ffi.Float, Color)>>('ImageDrawTextEx');
  late final _ImageDrawTextEx = _ImageDrawTextExPtr.asFunction<
      void Function(ffi.Pointer<Image>, Font, ffi.Pointer<ffi.Char>, Vector2,
          double, double, Color)>();

  Texture2D LoadTexture(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadTexture(
      fileName,
    );
  }

  late final _LoadTexturePtr =
      _lookup<ffi.NativeFunction<Texture2D Function(ffi.Pointer<ffi.Char>)>>(
          'LoadTexture');
  late final _LoadTexture =
      _LoadTexturePtr.asFunction<Texture2D Function(ffi.Pointer<ffi.Char>)>();

  Texture2D LoadTextureFromImage(
    Image image,
  ) {
    return _LoadTextureFromImage(
      image,
    );
  }

  late final _LoadTextureFromImagePtr =
      _lookup<ffi.NativeFunction<Texture2D Function(Image)>>(
          'LoadTextureFromImage');
  late final _LoadTextureFromImage =
      _LoadTextureFromImagePtr.asFunction<Texture2D Function(Image)>();

  TextureCubemap LoadTextureCubemap(
    Image image,
    int layout,
  ) {
    return _LoadTextureCubemap(
      image,
      layout,
    );
  }

  late final _LoadTextureCubemapPtr =
      _lookup<ffi.NativeFunction<TextureCubemap Function(Image, ffi.Int)>>(
          'LoadTextureCubemap');
  late final _LoadTextureCubemap =
      _LoadTextureCubemapPtr.asFunction<TextureCubemap Function(Image, int)>();

  RenderTexture2D LoadRenderTexture(
    int width,
    int height,
  ) {
    return _LoadRenderTexture(
      width,
      height,
    );
  }

  late final _LoadRenderTexturePtr =
      _lookup<ffi.NativeFunction<RenderTexture2D Function(ffi.Int, ffi.Int)>>(
          'LoadRenderTexture');
  late final _LoadRenderTexture =
      _LoadRenderTexturePtr.asFunction<RenderTexture2D Function(int, int)>();

  bool IsTextureReady(
    Texture2D texture,
  ) {
    return _IsTextureReady(
      texture,
    );
  }

  late final _IsTextureReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Texture2D)>>(
          'IsTextureReady');
  late final _IsTextureReady =
      _IsTextureReadyPtr.asFunction<bool Function(Texture2D)>();

  void UnloadTexture(
    Texture2D texture,
  ) {
    return _UnloadTexture(
      texture,
    );
  }

  late final _UnloadTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Texture2D)>>(
          'UnloadTexture');
  late final _UnloadTexture =
      _UnloadTexturePtr.asFunction<void Function(Texture2D)>();

  bool IsRenderTextureReady(
    RenderTexture2D target,
  ) {
    return _IsRenderTextureReady(
      target,
    );
  }

  late final _IsRenderTextureReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RenderTexture2D)>>(
          'IsRenderTextureReady');
  late final _IsRenderTextureReady =
      _IsRenderTextureReadyPtr.asFunction<bool Function(RenderTexture2D)>();

  void UnloadRenderTexture(
    RenderTexture2D target,
  ) {
    return _UnloadRenderTexture(
      target,
    );
  }

  late final _UnloadRenderTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RenderTexture2D)>>(
          'UnloadRenderTexture');
  late final _UnloadRenderTexture =
      _UnloadRenderTexturePtr.asFunction<void Function(RenderTexture2D)>();

  void UpdateTexture(
    Texture2D texture,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _UpdateTexture(
      texture,
      pixels,
    );
  }

  late final _UpdateTexturePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Texture2D, ffi.Pointer<ffi.Void>)>>(
      'UpdateTexture');
  late final _UpdateTexture = _UpdateTexturePtr.asFunction<
      void Function(Texture2D, ffi.Pointer<ffi.Void>)>();

  void UpdateTextureRec(
    Texture2D texture,
    Rectangle rec,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _UpdateTextureRec(
      texture,
      rec,
      pixels,
    );
  }

  late final _UpdateTextureRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Texture2D, Rectangle,
              ffi.Pointer<ffi.Void>)>>('UpdateTextureRec');
  late final _UpdateTextureRec = _UpdateTextureRecPtr.asFunction<
      void Function(Texture2D, Rectangle, ffi.Pointer<ffi.Void>)>();

  void GenTextureMipmaps(
    ffi.Pointer<Texture2D> texture,
  ) {
    return _GenTextureMipmaps(
      texture,
    );
  }

  late final _GenTextureMipmapsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Texture2D>)>>(
          'GenTextureMipmaps');
  late final _GenTextureMipmaps =
      _GenTextureMipmapsPtr.asFunction<void Function(ffi.Pointer<Texture2D>)>();

  void SetTextureFilter(
    Texture2D texture,
    int filter,
  ) {
    return _SetTextureFilter(
      texture,
      filter,
    );
  }

  late final _SetTextureFilterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Texture2D, ffi.Int)>>(
          'SetTextureFilter');
  late final _SetTextureFilter =
      _SetTextureFilterPtr.asFunction<void Function(Texture2D, int)>();

  void SetTextureWrap(
    Texture2D texture,
    int wrap,
  ) {
    return _SetTextureWrap(
      texture,
      wrap,
    );
  }

  late final _SetTextureWrapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Texture2D, ffi.Int)>>(
          'SetTextureWrap');
  late final _SetTextureWrap =
      _SetTextureWrapPtr.asFunction<void Function(Texture2D, int)>();

  void DrawTexture(
    Texture2D texture,
    int posX,
    int posY,
    Color tint,
  ) {
    return _DrawTexture(
      texture,
      posX,
      posY,
      tint,
    );
  }

  late final _DrawTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Texture2D, ffi.Int, ffi.Int, Color)>>('DrawTexture');
  late final _DrawTexture =
      _DrawTexturePtr.asFunction<void Function(Texture2D, int, int, Color)>();

  void DrawTextureV(
    Texture2D texture,
    Vector2 position,
    Color tint,
  ) {
    return _DrawTextureV(
      texture,
      position,
      tint,
    );
  }

  late final _DrawTextureVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Texture2D, Vector2, Color)>>(
          'DrawTextureV');
  late final _DrawTextureV =
      _DrawTextureVPtr.asFunction<void Function(Texture2D, Vector2, Color)>();

  void DrawTextureEx(
    Texture2D texture,
    Vector2 position,
    double rotation,
    double scale,
    Color tint,
  ) {
    return _DrawTextureEx(
      texture,
      position,
      rotation,
      scale,
      tint,
    );
  }

  late final _DrawTextureExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Texture2D, Vector2, ffi.Float, ffi.Float,
              Color)>>('DrawTextureEx');
  late final _DrawTextureEx = _DrawTextureExPtr.asFunction<
      void Function(Texture2D, Vector2, double, double, Color)>();

  void DrawTextureRec(
    Texture2D texture,
    Rectangle source,
    Vector2 position,
    Color tint,
  ) {
    return _DrawTextureRec(
      texture,
      source,
      position,
      tint,
    );
  }

  late final _DrawTextureRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Texture2D, Rectangle, Vector2, Color)>>('DrawTextureRec');
  late final _DrawTextureRec = _DrawTextureRecPtr.asFunction<
      void Function(Texture2D, Rectangle, Vector2, Color)>();

  void DrawTexturePro(
    Texture2D texture,
    Rectangle source,
    Rectangle dest,
    Vector2 origin,
    double rotation,
    Color tint,
  ) {
    return _DrawTexturePro(
      texture,
      source,
      dest,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawTextureProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Texture2D, Rectangle, Rectangle, Vector2, ffi.Float,
              Color)>>('DrawTexturePro');
  late final _DrawTexturePro = _DrawTextureProPtr.asFunction<
      void Function(Texture2D, Rectangle, Rectangle, Vector2, double, Color)>();

  void DrawTextureNPatch(
    Texture2D texture,
    NPatchInfo nPatchInfo,
    Rectangle dest,
    Vector2 origin,
    double rotation,
    Color tint,
  ) {
    return _DrawTextureNPatch(
      texture,
      nPatchInfo,
      dest,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawTextureNPatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Texture2D, NPatchInfo, Rectangle, Vector2,
              ffi.Float, Color)>>('DrawTextureNPatch');
  late final _DrawTextureNPatch = _DrawTextureNPatchPtr.asFunction<
      void Function(
          Texture2D, NPatchInfo, Rectangle, Vector2, double, Color)>();

  Color Fade(
    Color color,
    double alpha,
  ) {
    return _Fade(
      color,
      alpha,
    );
  }

  late final _FadePtr =
      _lookup<ffi.NativeFunction<Color Function(Color, ffi.Float)>>('Fade');
  late final _Fade = _FadePtr.asFunction<Color Function(Color, double)>();

  int ColorToInt(
    Color color,
  ) {
    return _ColorToInt(
      color,
    );
  }

  late final _ColorToIntPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Color)>>('ColorToInt');
  late final _ColorToInt = _ColorToIntPtr.asFunction<int Function(Color)>();

  Vector4 ColorNormalize(
    Color color,
  ) {
    return _ColorNormalize(
      color,
    );
  }

  late final _ColorNormalizePtr =
      _lookup<ffi.NativeFunction<Vector4 Function(Color)>>('ColorNormalize');
  late final _ColorNormalize =
      _ColorNormalizePtr.asFunction<Vector4 Function(Color)>();

  Color ColorFromNormalized(
    Vector4 normalized,
  ) {
    return _ColorFromNormalized(
      normalized,
    );
  }

  late final _ColorFromNormalizedPtr =
      _lookup<ffi.NativeFunction<Color Function(Vector4)>>(
          'ColorFromNormalized');
  late final _ColorFromNormalized =
      _ColorFromNormalizedPtr.asFunction<Color Function(Vector4)>();

  Vector3 ColorToHSV(
    Color color,
  ) {
    return _ColorToHSV(
      color,
    );
  }

  late final _ColorToHSVPtr =
      _lookup<ffi.NativeFunction<Vector3 Function(Color)>>('ColorToHSV');
  late final _ColorToHSV = _ColorToHSVPtr.asFunction<Vector3 Function(Color)>();

  Color ColorFromHSV(
    double hue,
    double saturation,
    double value,
  ) {
    return _ColorFromHSV(
      hue,
      saturation,
      value,
    );
  }

  late final _ColorFromHSVPtr = _lookup<
          ffi.NativeFunction<Color Function(ffi.Float, ffi.Float, ffi.Float)>>(
      'ColorFromHSV');
  late final _ColorFromHSV =
      _ColorFromHSVPtr.asFunction<Color Function(double, double, double)>();

  Color ColorTint(
    Color color,
    Color tint,
  ) {
    return _ColorTint(
      color,
      tint,
    );
  }

  late final _ColorTintPtr =
      _lookup<ffi.NativeFunction<Color Function(Color, Color)>>('ColorTint');
  late final _ColorTint =
      _ColorTintPtr.asFunction<Color Function(Color, Color)>();

  Color ColorBrightness(
    Color color,
    double factor,
  ) {
    return _ColorBrightness(
      color,
      factor,
    );
  }

  late final _ColorBrightnessPtr =
      _lookup<ffi.NativeFunction<Color Function(Color, ffi.Float)>>(
          'ColorBrightness');
  late final _ColorBrightness =
      _ColorBrightnessPtr.asFunction<Color Function(Color, double)>();

  Color ColorContrast(
    Color color,
    double contrast,
  ) {
    return _ColorContrast(
      color,
      contrast,
    );
  }

  late final _ColorContrastPtr =
      _lookup<ffi.NativeFunction<Color Function(Color, ffi.Float)>>(
          'ColorContrast');
  late final _ColorContrast =
      _ColorContrastPtr.asFunction<Color Function(Color, double)>();

  Color ColorAlpha(
    Color color,
    double alpha,
  ) {
    return _ColorAlpha(
      color,
      alpha,
    );
  }

  late final _ColorAlphaPtr =
      _lookup<ffi.NativeFunction<Color Function(Color, ffi.Float)>>(
          'ColorAlpha');
  late final _ColorAlpha =
      _ColorAlphaPtr.asFunction<Color Function(Color, double)>();

  Color ColorAlphaBlend(
    Color dst,
    Color src,
    Color tint,
  ) {
    return _ColorAlphaBlend(
      dst,
      src,
      tint,
    );
  }

  late final _ColorAlphaBlendPtr =
      _lookup<ffi.NativeFunction<Color Function(Color, Color, Color)>>(
          'ColorAlphaBlend');
  late final _ColorAlphaBlend =
      _ColorAlphaBlendPtr.asFunction<Color Function(Color, Color, Color)>();

  Color GetColor(
    int hexValue,
  ) {
    return _GetColor(
      hexValue,
    );
  }

  late final _GetColorPtr =
      _lookup<ffi.NativeFunction<Color Function(ffi.UnsignedInt)>>('GetColor');
  late final _GetColor = _GetColorPtr.asFunction<Color Function(int)>();

  Color GetPixelColor(
    ffi.Pointer<ffi.Void> srcPtr,
    int format,
  ) {
    return _GetPixelColor(
      srcPtr,
      format,
    );
  }

  late final _GetPixelColorPtr = _lookup<
          ffi.NativeFunction<Color Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'GetPixelColor');
  late final _GetPixelColor = _GetPixelColorPtr.asFunction<
      Color Function(ffi.Pointer<ffi.Void>, int)>();

  void SetPixelColor(
    ffi.Pointer<ffi.Void> dstPtr,
    Color color,
    int format,
  ) {
    return _SetPixelColor(
      dstPtr,
      color,
      format,
    );
  }

  late final _SetPixelColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, Color, ffi.Int)>>('SetPixelColor');
  late final _SetPixelColor = _SetPixelColorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, Color, int)>();

  int GetPixelDataSize(
    int width,
    int height,
    int format,
  ) {
    return _GetPixelDataSize(
      width,
      height,
      format,
    );
  }

  late final _GetPixelDataSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'GetPixelDataSize');
  late final _GetPixelDataSize =
      _GetPixelDataSizePtr.asFunction<int Function(int, int, int)>();

  Font GetFontDefault() {
    return _GetFontDefault();
  }

  late final _GetFontDefaultPtr =
      _lookup<ffi.NativeFunction<Font Function()>>('GetFontDefault');
  late final _GetFontDefault = _GetFontDefaultPtr.asFunction<Font Function()>();

  Font LoadFont(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadFont(
      fileName,
    );
  }

  late final _LoadFontPtr =
      _lookup<ffi.NativeFunction<Font Function(ffi.Pointer<ffi.Char>)>>(
          'LoadFont');
  late final _LoadFont =
      _LoadFontPtr.asFunction<Font Function(ffi.Pointer<ffi.Char>)>();

  Font LoadFontEx(
    ffi.Pointer<ffi.Char> fileName,
    int fontSize,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
  ) {
    return _LoadFontEx(
      fileName,
      fontSize,
      codepoints,
      codepointCount,
    );
  }

  late final _LoadFontExPtr = _lookup<
      ffi.NativeFunction<
          Font Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('LoadFontEx');
  late final _LoadFontEx = _LoadFontExPtr.asFunction<
      Font Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>, int)>();

  Font LoadFontFromImage(
    Image image,
    Color key,
    int firstChar,
  ) {
    return _LoadFontFromImage(
      image,
      key,
      firstChar,
    );
  }

  late final _LoadFontFromImagePtr =
      _lookup<ffi.NativeFunction<Font Function(Image, Color, ffi.Int)>>(
          'LoadFontFromImage');
  late final _LoadFontFromImage =
      _LoadFontFromImagePtr.asFunction<Font Function(Image, Color, int)>();

  Font LoadFontFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
    int fontSize,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
  ) {
    return _LoadFontFromMemory(
      fileType,
      fileData,
      dataSize,
      fontSize,
      codepoints,
      codepointCount,
    );
  }

  late final _LoadFontFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          Font Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('LoadFontFromMemory');
  late final _LoadFontFromMemory = _LoadFontFromMemoryPtr.asFunction<
      Font Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int,
          int, ffi.Pointer<ffi.Int>, int)>();

  bool IsFontReady(
    Font font,
  ) {
    return _IsFontReady(
      font,
    );
  }

  late final _IsFontReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Font)>>('IsFontReady');
  late final _IsFontReady = _IsFontReadyPtr.asFunction<bool Function(Font)>();

  ffi.Pointer<GlyphInfo> LoadFontData(
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
    int fontSize,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
    int type,
  ) {
    return _LoadFontData(
      fileData,
      dataSize,
      fontSize,
      codepoints,
      codepointCount,
      type,
    );
  }

  late final _LoadFontDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GlyphInfo> Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int)>>('LoadFontData');
  late final _LoadFontData = _LoadFontDataPtr.asFunction<
      ffi.Pointer<GlyphInfo> Function(ffi.Pointer<ffi.UnsignedChar>, int, int,
          ffi.Pointer<ffi.Int>, int, int)>();

  Image GenImageFontAtlas(
    ffi.Pointer<GlyphInfo> glyphs,
    ffi.Pointer<ffi.Pointer<Rectangle>> glyphRecs,
    int glyphCount,
    int fontSize,
    int padding,
    int packMethod,
  ) {
    return _GenImageFontAtlas(
      glyphs,
      glyphRecs,
      glyphCount,
      fontSize,
      padding,
      packMethod,
    );
  }

  late final _GenImageFontAtlasPtr = _lookup<
      ffi.NativeFunction<
          Image Function(
              ffi.Pointer<GlyphInfo>,
              ffi.Pointer<ffi.Pointer<Rectangle>>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('GenImageFontAtlas');
  late final _GenImageFontAtlas = _GenImageFontAtlasPtr.asFunction<
      Image Function(ffi.Pointer<GlyphInfo>,
          ffi.Pointer<ffi.Pointer<Rectangle>>, int, int, int, int)>();

  void UnloadFontData(
    ffi.Pointer<GlyphInfo> glyphs,
    int glyphCount,
  ) {
    return _UnloadFontData(
      glyphs,
      glyphCount,
    );
  }

  late final _UnloadFontDataPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GlyphInfo>, ffi.Int)>>(
      'UnloadFontData');
  late final _UnloadFontData = _UnloadFontDataPtr.asFunction<
      void Function(ffi.Pointer<GlyphInfo>, int)>();

  void UnloadFont(
    Font font,
  ) {
    return _UnloadFont(
      font,
    );
  }

  late final _UnloadFontPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Font)>>('UnloadFont');
  late final _UnloadFont = _UnloadFontPtr.asFunction<void Function(Font)>();

  bool ExportFontAsCode(
    Font font,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportFontAsCode(
      font,
      fileName,
    );
  }

  late final _ExportFontAsCodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Font, ffi.Pointer<ffi.Char>)>>(
      'ExportFontAsCode');
  late final _ExportFontAsCode = _ExportFontAsCodePtr.asFunction<
      bool Function(Font, ffi.Pointer<ffi.Char>)>();

  void DrawFPS(
    int posX,
    int posY,
  ) {
    return _DrawFPS(
      posX,
      posY,
    );
  }

  late final _DrawFPSPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'DrawFPS');
  late final _DrawFPS = _DrawFPSPtr.asFunction<void Function(int, int)>();

  void DrawText(
    ffi.Pointer<ffi.Char> text,
    int posX,
    int posY,
    int fontSize,
    Color color,
  ) {
    return _DrawText(
      text,
      posX,
      posY,
      fontSize,
      color,
    );
  }

  late final _DrawTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int,
              Color)>>('DrawText');
  late final _DrawText = _DrawTextPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, int, int, Color)>();

  void DrawTextEx(
    Font font,
    ffi.Pointer<ffi.Char> text,
    Vector2 position,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _DrawTextEx(
      font,
      text,
      position,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _DrawTextExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Font, ffi.Pointer<ffi.Char>, Vector2, ffi.Float,
              ffi.Float, Color)>>('DrawTextEx');
  late final _DrawTextEx = _DrawTextExPtr.asFunction<
      void Function(
          Font, ffi.Pointer<ffi.Char>, Vector2, double, double, Color)>();

  void DrawTextPro(
    Font font,
    ffi.Pointer<ffi.Char> text,
    Vector2 position,
    Vector2 origin,
    double rotation,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _DrawTextPro(
      font,
      text,
      position,
      origin,
      rotation,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _DrawTextProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Font, ffi.Pointer<ffi.Char>, Vector2, Vector2,
              ffi.Float, ffi.Float, ffi.Float, Color)>>('DrawTextPro');
  late final _DrawTextPro = _DrawTextProPtr.asFunction<
      void Function(Font, ffi.Pointer<ffi.Char>, Vector2, Vector2, double,
          double, double, Color)>();

  void DrawTextCodepoint(
    Font font,
    int codepoint,
    Vector2 position,
    double fontSize,
    Color tint,
  ) {
    return _DrawTextCodepoint(
      font,
      codepoint,
      position,
      fontSize,
      tint,
    );
  }

  late final _DrawTextCodepointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Font, ffi.Int, Vector2, ffi.Float, Color)>>('DrawTextCodepoint');
  late final _DrawTextCodepoint = _DrawTextCodepointPtr.asFunction<
      void Function(Font, int, Vector2, double, Color)>();

  void DrawTextCodepoints(
    Font font,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
    Vector2 position,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _DrawTextCodepoints(
      font,
      codepoints,
      codepointCount,
      position,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _DrawTextCodepointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Font, ffi.Pointer<ffi.Int>, ffi.Int, Vector2,
              ffi.Float, ffi.Float, Color)>>('DrawTextCodepoints');
  late final _DrawTextCodepoints = _DrawTextCodepointsPtr.asFunction<
      void Function(
          Font, ffi.Pointer<ffi.Int>, int, Vector2, double, double, Color)>();

  void SetTextLineSpacing(
    int spacing,
  ) {
    return _SetTextLineSpacing(
      spacing,
    );
  }

  late final _SetTextLineSpacingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetTextLineSpacing');
  late final _SetTextLineSpacing =
      _SetTextLineSpacingPtr.asFunction<void Function(int)>();

  int MeasureText(
    ffi.Pointer<ffi.Char> text,
    int fontSize,
  ) {
    return _MeasureText(
      text,
      fontSize,
    );
  }

  late final _MeasureTextPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'MeasureText');
  late final _MeasureText =
      _MeasureTextPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  Vector2 MeasureTextEx(
    Font font,
    ffi.Pointer<ffi.Char> text,
    double fontSize,
    double spacing,
  ) {
    return _MeasureTextEx(
      font,
      text,
      fontSize,
      spacing,
    );
  }

  late final _MeasureTextExPtr = _lookup<
      ffi.NativeFunction<
          Vector2 Function(Font, ffi.Pointer<ffi.Char>, ffi.Float,
              ffi.Float)>>('MeasureTextEx');
  late final _MeasureTextEx = _MeasureTextExPtr.asFunction<
      Vector2 Function(Font, ffi.Pointer<ffi.Char>, double, double)>();

  int GetGlyphIndex(
    Font font,
    int codepoint,
  ) {
    return _GetGlyphIndex(
      font,
      codepoint,
    );
  }

  late final _GetGlyphIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Font, ffi.Int)>>(
          'GetGlyphIndex');
  late final _GetGlyphIndex =
      _GetGlyphIndexPtr.asFunction<int Function(Font, int)>();

  GlyphInfo GetGlyphInfo(
    Font font,
    int codepoint,
  ) {
    return _GetGlyphInfo(
      font,
      codepoint,
    );
  }

  late final _GetGlyphInfoPtr =
      _lookup<ffi.NativeFunction<GlyphInfo Function(Font, ffi.Int)>>(
          'GetGlyphInfo');
  late final _GetGlyphInfo =
      _GetGlyphInfoPtr.asFunction<GlyphInfo Function(Font, int)>();

  Rectangle GetGlyphAtlasRec(
    Font font,
    int codepoint,
  ) {
    return _GetGlyphAtlasRec(
      font,
      codepoint,
    );
  }

  late final _GetGlyphAtlasRecPtr =
      _lookup<ffi.NativeFunction<Rectangle Function(Font, ffi.Int)>>(
          'GetGlyphAtlasRec');
  late final _GetGlyphAtlasRec =
      _GetGlyphAtlasRecPtr.asFunction<Rectangle Function(Font, int)>();

  ffi.Pointer<ffi.Char> LoadUTF8(
    ffi.Pointer<ffi.Int> codepoints,
    int length,
  ) {
    return _LoadUTF8(
      codepoints,
      length,
    );
  }

  late final _LoadUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Int)>>('LoadUTF8');
  late final _LoadUTF8 = _LoadUTF8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Int>, int)>();

  void UnloadUTF8(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UnloadUTF8(
      text,
    );
  }

  late final _UnloadUTF8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'UnloadUTF8');
  late final _UnloadUTF8 =
      _UnloadUTF8Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> LoadCodepoints(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _LoadCodepoints(
      text,
      count,
    );
  }

  late final _LoadCodepointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadCodepoints');
  late final _LoadCodepoints = _LoadCodepointsPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  void UnloadCodepoints(
    ffi.Pointer<ffi.Int> codepoints,
  ) {
    return _UnloadCodepoints(
      codepoints,
    );
  }

  late final _UnloadCodepointsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'UnloadCodepoints');
  late final _UnloadCodepoints =
      _UnloadCodepointsPtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  int GetCodepointCount(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _GetCodepointCount(
      text,
    );
  }

  late final _GetCodepointCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'GetCodepointCount');
  late final _GetCodepointCount =
      _GetCodepointCountPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int GetCodepoint(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> codepointSize,
  ) {
    return _GetCodepoint(
      text,
      codepointSize,
    );
  }

  late final _GetCodepointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('GetCodepoint');
  late final _GetCodepoint = _GetCodepointPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int GetCodepointNext(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> codepointSize,
  ) {
    return _GetCodepointNext(
      text,
      codepointSize,
    );
  }

  late final _GetCodepointNextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('GetCodepointNext');
  late final _GetCodepointNext = _GetCodepointNextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int GetCodepointPrevious(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> codepointSize,
  ) {
    return _GetCodepointPrevious(
      text,
      codepointSize,
    );
  }

  late final _GetCodepointPreviousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('GetCodepointPrevious');
  late final _GetCodepointPrevious = _GetCodepointPreviousPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> CodepointToUTF8(
    int codepoint,
    ffi.Pointer<ffi.Int> utf8Size,
  ) {
    return _CodepointToUTF8(
      codepoint,
      utf8Size,
    );
  }

  late final _CodepointToUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Int>)>>('CodepointToUTF8');
  late final _CodepointToUTF8 = _CodepointToUTF8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Int>)>();

  int TextCopy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
  ) {
    return _TextCopy(
      dst,
      src,
    );
  }

  late final _TextCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextCopy');
  late final _TextCopy = _TextCopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool TextIsEqual(
    ffi.Pointer<ffi.Char> text1,
    ffi.Pointer<ffi.Char> text2,
  ) {
    return _TextIsEqual(
      text1,
      text2,
    );
  }

  late final _TextIsEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextIsEqual');
  late final _TextIsEqual = _TextIsEqualPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int TextLength(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextLength(
      text,
    );
  }

  late final _TextLengthPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>)>>(
      'TextLength');
  late final _TextLength =
      _TextLengthPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextFormat(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextFormat(
      text,
    );
  }

  late final _TextFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('TextFormat');
  late final _TextFormat = _TextFormatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextSubtext(
    ffi.Pointer<ffi.Char> text,
    int position,
    int length,
  ) {
    return _TextSubtext(
      text,
      position,
      length,
    );
  }

  late final _TextSubtextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('TextSubtext');
  late final _TextSubtext = _TextSubtextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> TextReplace(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> replace,
    ffi.Pointer<ffi.Char> by,
  ) {
    return _TextReplace(
      text,
      replace,
      by,
    );
  }

  late final _TextReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextReplace');
  late final _TextReplace = _TextReplacePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextInsert(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> insert,
    int position,
  ) {
    return _TextInsert(
      text,
      insert,
      position,
    );
  }

  late final _TextInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('TextInsert');
  late final _TextInsert = _TextInsertPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> TextJoin(
    ffi.Pointer<ffi.Pointer<ffi.Char>> textList,
    int count,
    ffi.Pointer<ffi.Char> delimiter,
  ) {
    return _TextJoin(
      textList,
      count,
      delimiter,
    );
  }

  late final _TextJoinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('TextJoin');
  late final _TextJoin = _TextJoinPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> TextSplit(
    ffi.Pointer<ffi.Char> text,
    int delimiter,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _TextSplit(
      text,
      delimiter,
      count,
    );
  }

  late final _TextSplitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Char, ffi.Pointer<ffi.Int>)>>('TextSplit');
  late final _TextSplit = _TextSplitPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>)>();

  void TextAppend(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> append,
    ffi.Pointer<ffi.Int> position,
  ) {
    return _TextAppend(
      text,
      append,
      position,
    );
  }

  late final _TextAppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('TextAppend');
  late final _TextAppend = _TextAppendPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int TextFindIndex(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> find,
  ) {
    return _TextFindIndex(
      text,
      find,
    );
  }

  late final _TextFindIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextFindIndex');
  late final _TextFindIndex = _TextFindIndexPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextToUpper(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToUpper(
      text,
    );
  }

  late final _TextToUpperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TextToUpper');
  late final _TextToUpper = _TextToUpperPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextToLower(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToLower(
      text,
    );
  }

  late final _TextToLowerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TextToLower');
  late final _TextToLower = _TextToLowerPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextToPascal(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToPascal(
      text,
    );
  }

  late final _TextToPascalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TextToPascal');
  late final _TextToPascal = _TextToPascalPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int TextToInteger(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToInteger(
      text,
    );
  }

  late final _TextToIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'TextToInteger');
  late final _TextToInteger =
      _TextToIntegerPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void DrawLine3D(
    Vector3 startPos,
    Vector3 endPos,
    Color color,
  ) {
    return _DrawLine3D(
      startPos,
      endPos,
      color,
    );
  }

  late final _DrawLine3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, Vector3, Color)>>(
          'DrawLine3D');
  late final _DrawLine3D =
      _DrawLine3DPtr.asFunction<void Function(Vector3, Vector3, Color)>();

  void DrawPoint3D(
    Vector3 position,
    Color color,
  ) {
    return _DrawPoint3D(
      position,
      color,
    );
  }

  late final _DrawPoint3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, Color)>>(
          'DrawPoint3D');
  late final _DrawPoint3D =
      _DrawPoint3DPtr.asFunction<void Function(Vector3, Color)>();

  void DrawCircle3D(
    Vector3 center,
    double radius,
    Vector3 rotationAxis,
    double rotationAngle,
    Color color,
  ) {
    return _DrawCircle3D(
      center,
      radius,
      rotationAxis,
      rotationAngle,
      color,
    );
  }

  late final _DrawCircle3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector3, ffi.Float, Vector3, ffi.Float, Color)>>('DrawCircle3D');
  late final _DrawCircle3D = _DrawCircle3DPtr.asFunction<
      void Function(Vector3, double, Vector3, double, Color)>();

  void DrawTriangle3D(
    Vector3 v1,
    Vector3 v2,
    Vector3 v3,
    Color color,
  ) {
    return _DrawTriangle3D(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTriangle3DPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Vector3, Vector3, Vector3, Color)>>(
      'DrawTriangle3D');
  late final _DrawTriangle3D = _DrawTriangle3DPtr.asFunction<
      void Function(Vector3, Vector3, Vector3, Color)>();

  void DrawTriangleStrip3D(
    ffi.Pointer<Vector3> points,
    int pointCount,
    Color color,
  ) {
    return _DrawTriangleStrip3D(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleStrip3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Vector3>, ffi.Int, Color)>>('DrawTriangleStrip3D');
  late final _DrawTriangleStrip3D = _DrawTriangleStrip3DPtr.asFunction<
      void Function(ffi.Pointer<Vector3>, int, Color)>();

  void DrawCube(
    Vector3 position,
    double width,
    double height,
    double length,
    Color color,
  ) {
    return _DrawCube(
      position,
      width,
      height,
      length,
      color,
    );
  }

  late final _DrawCubePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector3, ffi.Float, ffi.Float, ffi.Float, Color)>>('DrawCube');
  late final _DrawCube = _DrawCubePtr.asFunction<
      void Function(Vector3, double, double, double, Color)>();

  void DrawCubeV(
    Vector3 position,
    Vector3 size,
    Color color,
  ) {
    return _DrawCubeV(
      position,
      size,
      color,
    );
  }

  late final _DrawCubeVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, Vector3, Color)>>(
          'DrawCubeV');
  late final _DrawCubeV =
      _DrawCubeVPtr.asFunction<void Function(Vector3, Vector3, Color)>();

  void DrawCubeWires(
    Vector3 position,
    double width,
    double height,
    double length,
    Color color,
  ) {
    return _DrawCubeWires(
      position,
      width,
      height,
      length,
      color,
    );
  }

  late final _DrawCubeWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, ffi.Float, ffi.Float, ffi.Float,
              Color)>>('DrawCubeWires');
  late final _DrawCubeWires = _DrawCubeWiresPtr.asFunction<
      void Function(Vector3, double, double, double, Color)>();

  void DrawCubeWiresV(
    Vector3 position,
    Vector3 size,
    Color color,
  ) {
    return _DrawCubeWiresV(
      position,
      size,
      color,
    );
  }

  late final _DrawCubeWiresVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, Vector3, Color)>>(
          'DrawCubeWiresV');
  late final _DrawCubeWiresV =
      _DrawCubeWiresVPtr.asFunction<void Function(Vector3, Vector3, Color)>();

  void DrawSphere(
    Vector3 centerPos,
    double radius,
    Color color,
  ) {
    return _DrawSphere(
      centerPos,
      radius,
      color,
    );
  }

  late final _DrawSpherePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, ffi.Float, Color)>>(
          'DrawSphere');
  late final _DrawSphere =
      _DrawSpherePtr.asFunction<void Function(Vector3, double, Color)>();

  void DrawSphereEx(
    Vector3 centerPos,
    double radius,
    int rings,
    int slices,
    Color color,
  ) {
    return _DrawSphereEx(
      centerPos,
      radius,
      rings,
      slices,
      color,
    );
  }

  late final _DrawSphereExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector3, ffi.Float, ffi.Int, ffi.Int, Color)>>('DrawSphereEx');
  late final _DrawSphereEx = _DrawSphereExPtr.asFunction<
      void Function(Vector3, double, int, int, Color)>();

  void DrawSphereWires(
    Vector3 centerPos,
    double radius,
    int rings,
    int slices,
    Color color,
  ) {
    return _DrawSphereWires(
      centerPos,
      radius,
      rings,
      slices,
      color,
    );
  }

  late final _DrawSphereWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector3, ffi.Float, ffi.Int, ffi.Int, Color)>>('DrawSphereWires');
  late final _DrawSphereWires = _DrawSphereWiresPtr.asFunction<
      void Function(Vector3, double, int, int, Color)>();

  void DrawCylinder(
    Vector3 position,
    double radiusTop,
    double radiusBottom,
    double height,
    int slices,
    Color color,
  ) {
    return _DrawCylinder(
      position,
      radiusTop,
      radiusBottom,
      height,
      slices,
      color,
    );
  }

  late final _DrawCylinderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCylinder');
  late final _DrawCylinder = _DrawCylinderPtr.asFunction<
      void Function(Vector3, double, double, double, int, Color)>();

  void DrawCylinderEx(
    Vector3 startPos,
    Vector3 endPos,
    double startRadius,
    double endRadius,
    int sides,
    Color color,
  ) {
    return _DrawCylinderEx(
      startPos,
      endPos,
      startRadius,
      endRadius,
      sides,
      color,
    );
  }

  late final _DrawCylinderExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, Vector3, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCylinderEx');
  late final _DrawCylinderEx = _DrawCylinderExPtr.asFunction<
      void Function(Vector3, Vector3, double, double, int, Color)>();

  void DrawCylinderWires(
    Vector3 position,
    double radiusTop,
    double radiusBottom,
    double height,
    int slices,
    Color color,
  ) {
    return _DrawCylinderWires(
      position,
      radiusTop,
      radiusBottom,
      height,
      slices,
      color,
    );
  }

  late final _DrawCylinderWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCylinderWires');
  late final _DrawCylinderWires = _DrawCylinderWiresPtr.asFunction<
      void Function(Vector3, double, double, double, int, Color)>();

  void DrawCylinderWiresEx(
    Vector3 startPos,
    Vector3 endPos,
    double startRadius,
    double endRadius,
    int sides,
    Color color,
  ) {
    return _DrawCylinderWiresEx(
      startPos,
      endPos,
      startRadius,
      endRadius,
      sides,
      color,
    );
  }

  late final _DrawCylinderWiresExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, Vector3, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCylinderWiresEx');
  late final _DrawCylinderWiresEx = _DrawCylinderWiresExPtr.asFunction<
      void Function(Vector3, Vector3, double, double, int, Color)>();

  void DrawCapsule(
    Vector3 startPos,
    Vector3 endPos,
    double radius,
    int slices,
    int rings,
    Color color,
  ) {
    return _DrawCapsule(
      startPos,
      endPos,
      radius,
      slices,
      rings,
      color,
    );
  }

  late final _DrawCapsulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, Vector3, ffi.Float, ffi.Int, ffi.Int,
              Color)>>('DrawCapsule');
  late final _DrawCapsule = _DrawCapsulePtr.asFunction<
      void Function(Vector3, Vector3, double, int, int, Color)>();

  void DrawCapsuleWires(
    Vector3 startPos,
    Vector3 endPos,
    double radius,
    int slices,
    int rings,
    Color color,
  ) {
    return _DrawCapsuleWires(
      startPos,
      endPos,
      radius,
      slices,
      rings,
      color,
    );
  }

  late final _DrawCapsuleWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, Vector3, ffi.Float, ffi.Int, ffi.Int,
              Color)>>('DrawCapsuleWires');
  late final _DrawCapsuleWires = _DrawCapsuleWiresPtr.asFunction<
      void Function(Vector3, Vector3, double, int, int, Color)>();

  void DrawPlane(
    Vector3 centerPos,
    Vector2 size,
    Color color,
  ) {
    return _DrawPlane(
      centerPos,
      size,
      color,
    );
  }

  late final _DrawPlanePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, Vector2, Color)>>(
          'DrawPlane');
  late final _DrawPlane =
      _DrawPlanePtr.asFunction<void Function(Vector3, Vector2, Color)>();

  void DrawRay(
    Ray ray,
    Color color,
  ) {
    return _DrawRay(
      ray,
      color,
    );
  }

  late final _DrawRayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Ray, Color)>>('DrawRay');
  late final _DrawRay = _DrawRayPtr.asFunction<void Function(Ray, Color)>();

  void DrawGrid(
    int slices,
    double spacing,
  ) {
    return _DrawGrid(
      slices,
      spacing,
    );
  }

  late final _DrawGridPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Float)>>(
          'DrawGrid');
  late final _DrawGrid = _DrawGridPtr.asFunction<void Function(int, double)>();

  Model LoadModel(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadModel(
      fileName,
    );
  }

  late final _LoadModelPtr =
      _lookup<ffi.NativeFunction<Model Function(ffi.Pointer<ffi.Char>)>>(
          'LoadModel');
  late final _LoadModel =
      _LoadModelPtr.asFunction<Model Function(ffi.Pointer<ffi.Char>)>();

  Model LoadModelFromMesh(
    Mesh mesh,
  ) {
    return _LoadModelFromMesh(
      mesh,
    );
  }

  late final _LoadModelFromMeshPtr =
      _lookup<ffi.NativeFunction<Model Function(Mesh)>>('LoadModelFromMesh');
  late final _LoadModelFromMesh =
      _LoadModelFromMeshPtr.asFunction<Model Function(Mesh)>();

  bool IsModelReady(
    Model model,
  ) {
    return _IsModelReady(
      model,
    );
  }

  late final _IsModelReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Model)>>('IsModelReady');
  late final _IsModelReady =
      _IsModelReadyPtr.asFunction<bool Function(Model)>();

  void UnloadModel(
    Model model,
  ) {
    return _UnloadModel(
      model,
    );
  }

  late final _UnloadModelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Model)>>('UnloadModel');
  late final _UnloadModel = _UnloadModelPtr.asFunction<void Function(Model)>();

  BoundingBox GetModelBoundingBox(
    Model model,
  ) {
    return _GetModelBoundingBox(
      model,
    );
  }

  late final _GetModelBoundingBoxPtr =
      _lookup<ffi.NativeFunction<BoundingBox Function(Model)>>(
          'GetModelBoundingBox');
  late final _GetModelBoundingBox =
      _GetModelBoundingBoxPtr.asFunction<BoundingBox Function(Model)>();

  void DrawModel(
    Model model,
    Vector3 position,
    double scale,
    Color tint,
  ) {
    return _DrawModel(
      model,
      position,
      scale,
      tint,
    );
  }

  late final _DrawModelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Model, Vector3, ffi.Float, Color)>>('DrawModel');
  late final _DrawModel =
      _DrawModelPtr.asFunction<void Function(Model, Vector3, double, Color)>();

  void DrawModelEx(
    Model model,
    Vector3 position,
    Vector3 rotationAxis,
    double rotationAngle,
    Vector3 scale,
    Color tint,
  ) {
    return _DrawModelEx(
      model,
      position,
      rotationAxis,
      rotationAngle,
      scale,
      tint,
    );
  }

  late final _DrawModelExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Model, Vector3, Vector3, ffi.Float, Vector3,
              Color)>>('DrawModelEx');
  late final _DrawModelEx = _DrawModelExPtr.asFunction<
      void Function(Model, Vector3, Vector3, double, Vector3, Color)>();

  void DrawModelWires(
    Model model,
    Vector3 position,
    double scale,
    Color tint,
  ) {
    return _DrawModelWires(
      model,
      position,
      scale,
      tint,
    );
  }

  late final _DrawModelWiresPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Model, Vector3, ffi.Float, Color)>>(
      'DrawModelWires');
  late final _DrawModelWires = _DrawModelWiresPtr.asFunction<
      void Function(Model, Vector3, double, Color)>();

  void DrawModelWiresEx(
    Model model,
    Vector3 position,
    Vector3 rotationAxis,
    double rotationAngle,
    Vector3 scale,
    Color tint,
  ) {
    return _DrawModelWiresEx(
      model,
      position,
      rotationAxis,
      rotationAngle,
      scale,
      tint,
    );
  }

  late final _DrawModelWiresExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Model, Vector3, Vector3, ffi.Float, Vector3,
              Color)>>('DrawModelWiresEx');
  late final _DrawModelWiresEx = _DrawModelWiresExPtr.asFunction<
      void Function(Model, Vector3, Vector3, double, Vector3, Color)>();

  void DrawBoundingBox(
    BoundingBox box,
    Color color,
  ) {
    return _DrawBoundingBox(
      box,
      color,
    );
  }

  late final _DrawBoundingBoxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BoundingBox, Color)>>(
          'DrawBoundingBox');
  late final _DrawBoundingBox =
      _DrawBoundingBoxPtr.asFunction<void Function(BoundingBox, Color)>();

  void DrawBillboard(
    Camera camera,
    Texture2D texture,
    Vector3 position,
    double size,
    Color tint,
  ) {
    return _DrawBillboard(
      camera,
      texture,
      position,
      size,
      tint,
    );
  }

  late final _DrawBillboardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Camera, Texture2D, Vector3, ffi.Float, Color)>>('DrawBillboard');
  late final _DrawBillboard = _DrawBillboardPtr.asFunction<
      void Function(Camera, Texture2D, Vector3, double, Color)>();

  void DrawBillboardRec(
    Camera camera,
    Texture2D texture,
    Rectangle source,
    Vector3 position,
    Vector2 size,
    Color tint,
  ) {
    return _DrawBillboardRec(
      camera,
      texture,
      source,
      position,
      size,
      tint,
    );
  }

  late final _DrawBillboardRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Camera, Texture2D, Rectangle, Vector3, Vector2,
              Color)>>('DrawBillboardRec');
  late final _DrawBillboardRec = _DrawBillboardRecPtr.asFunction<
      void Function(Camera, Texture2D, Rectangle, Vector3, Vector2, Color)>();

  void DrawBillboardPro(
    Camera camera,
    Texture2D texture,
    Rectangle source,
    Vector3 position,
    Vector3 up,
    Vector2 size,
    Vector2 origin,
    double rotation,
    Color tint,
  ) {
    return _DrawBillboardPro(
      camera,
      texture,
      source,
      position,
      up,
      size,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawBillboardProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Camera, Texture2D, Rectangle, Vector3, Vector3,
              Vector2, Vector2, ffi.Float, Color)>>('DrawBillboardPro');
  late final _DrawBillboardPro = _DrawBillboardProPtr.asFunction<
      void Function(Camera, Texture2D, Rectangle, Vector3, Vector3, Vector2,
          Vector2, double, Color)>();

  void UploadMesh(
    ffi.Pointer<Mesh> mesh,
    bool dynamic1,
  ) {
    return _UploadMesh(
      mesh,
      dynamic1,
    );
  }

  late final _UploadMeshPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Mesh>, ffi.Bool)>>(
      'UploadMesh');
  late final _UploadMesh =
      _UploadMeshPtr.asFunction<void Function(ffi.Pointer<Mesh>, bool)>();

  void UpdateMeshBuffer(
    Mesh mesh,
    int index,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    int offset,
  ) {
    return _UpdateMeshBuffer(
      mesh,
      index,
      data,
      dataSize,
      offset,
    );
  }

  late final _UpdateMeshBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mesh, ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('UpdateMeshBuffer');
  late final _UpdateMeshBuffer = _UpdateMeshBufferPtr.asFunction<
      void Function(Mesh, int, ffi.Pointer<ffi.Void>, int, int)>();

  void UnloadMesh(
    Mesh mesh,
  ) {
    return _UnloadMesh(
      mesh,
    );
  }

  late final _UnloadMeshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mesh)>>('UnloadMesh');
  late final _UnloadMesh = _UnloadMeshPtr.asFunction<void Function(Mesh)>();

  void DrawMesh(
    Mesh mesh,
    Material material,
    Matrix transform,
  ) {
    return _DrawMesh(
      mesh,
      material,
      transform,
    );
  }

  late final _DrawMeshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mesh, Material, Matrix)>>(
          'DrawMesh');
  late final _DrawMesh =
      _DrawMeshPtr.asFunction<void Function(Mesh, Material, Matrix)>();

  void DrawMeshInstanced(
    Mesh mesh,
    Material material,
    ffi.Pointer<Matrix> transforms,
    int instances,
  ) {
    return _DrawMeshInstanced(
      mesh,
      material,
      transforms,
      instances,
    );
  }

  late final _DrawMeshInstancedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mesh, Material, ffi.Pointer<Matrix>,
              ffi.Int)>>('DrawMeshInstanced');
  late final _DrawMeshInstanced = _DrawMeshInstancedPtr.asFunction<
      void Function(Mesh, Material, ffi.Pointer<Matrix>, int)>();

  bool ExportMesh(
    Mesh mesh,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportMesh(
      mesh,
      fileName,
    );
  }

  late final _ExportMeshPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Mesh, ffi.Pointer<ffi.Char>)>>(
      'ExportMesh');
  late final _ExportMesh =
      _ExportMeshPtr.asFunction<bool Function(Mesh, ffi.Pointer<ffi.Char>)>();

  BoundingBox GetMeshBoundingBox(
    Mesh mesh,
  ) {
    return _GetMeshBoundingBox(
      mesh,
    );
  }

  late final _GetMeshBoundingBoxPtr =
      _lookup<ffi.NativeFunction<BoundingBox Function(Mesh)>>(
          'GetMeshBoundingBox');
  late final _GetMeshBoundingBox =
      _GetMeshBoundingBoxPtr.asFunction<BoundingBox Function(Mesh)>();

  void GenMeshTangents(
    ffi.Pointer<Mesh> mesh,
  ) {
    return _GenMeshTangents(
      mesh,
    );
  }

  late final _GenMeshTangentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Mesh>)>>(
          'GenMeshTangents');
  late final _GenMeshTangents =
      _GenMeshTangentsPtr.asFunction<void Function(ffi.Pointer<Mesh>)>();

  Mesh GenMeshPoly(
    int sides,
    double radius,
  ) {
    return _GenMeshPoly(
      sides,
      radius,
    );
  }

  late final _GenMeshPolyPtr =
      _lookup<ffi.NativeFunction<Mesh Function(ffi.Int, ffi.Float)>>(
          'GenMeshPoly');
  late final _GenMeshPoly =
      _GenMeshPolyPtr.asFunction<Mesh Function(int, double)>();

  Mesh GenMeshPlane(
    double width,
    double length,
    int resX,
    int resZ,
  ) {
    return _GenMeshPlane(
      width,
      length,
      resX,
      resZ,
    );
  }

  late final _GenMeshPlanePtr = _lookup<
      ffi.NativeFunction<
          Mesh Function(
              ffi.Float, ffi.Float, ffi.Int, ffi.Int)>>('GenMeshPlane');
  late final _GenMeshPlane =
      _GenMeshPlanePtr.asFunction<Mesh Function(double, double, int, int)>();

  Mesh GenMeshCube(
    double width,
    double height,
    double length,
  ) {
    return _GenMeshCube(
      width,
      height,
      length,
    );
  }

  late final _GenMeshCubePtr = _lookup<
          ffi.NativeFunction<Mesh Function(ffi.Float, ffi.Float, ffi.Float)>>(
      'GenMeshCube');
  late final _GenMeshCube =
      _GenMeshCubePtr.asFunction<Mesh Function(double, double, double)>();

  Mesh GenMeshSphere(
    double radius,
    int rings,
    int slices,
  ) {
    return _GenMeshSphere(
      radius,
      rings,
      slices,
    );
  }

  late final _GenMeshSpherePtr =
      _lookup<ffi.NativeFunction<Mesh Function(ffi.Float, ffi.Int, ffi.Int)>>(
          'GenMeshSphere');
  late final _GenMeshSphere =
      _GenMeshSpherePtr.asFunction<Mesh Function(double, int, int)>();

  Mesh GenMeshHemiSphere(
    double radius,
    int rings,
    int slices,
  ) {
    return _GenMeshHemiSphere(
      radius,
      rings,
      slices,
    );
  }

  late final _GenMeshHemiSpherePtr =
      _lookup<ffi.NativeFunction<Mesh Function(ffi.Float, ffi.Int, ffi.Int)>>(
          'GenMeshHemiSphere');
  late final _GenMeshHemiSphere =
      _GenMeshHemiSpherePtr.asFunction<Mesh Function(double, int, int)>();

  Mesh GenMeshCylinder(
    double radius,
    double height,
    int slices,
  ) {
    return _GenMeshCylinder(
      radius,
      height,
      slices,
    );
  }

  late final _GenMeshCylinderPtr =
      _lookup<ffi.NativeFunction<Mesh Function(ffi.Float, ffi.Float, ffi.Int)>>(
          'GenMeshCylinder');
  late final _GenMeshCylinder =
      _GenMeshCylinderPtr.asFunction<Mesh Function(double, double, int)>();

  Mesh GenMeshCone(
    double radius,
    double height,
    int slices,
  ) {
    return _GenMeshCone(
      radius,
      height,
      slices,
    );
  }

  late final _GenMeshConePtr =
      _lookup<ffi.NativeFunction<Mesh Function(ffi.Float, ffi.Float, ffi.Int)>>(
          'GenMeshCone');
  late final _GenMeshCone =
      _GenMeshConePtr.asFunction<Mesh Function(double, double, int)>();

  Mesh GenMeshTorus(
    double radius,
    double size,
    int radSeg,
    int sides,
  ) {
    return _GenMeshTorus(
      radius,
      size,
      radSeg,
      sides,
    );
  }

  late final _GenMeshTorusPtr = _lookup<
      ffi.NativeFunction<
          Mesh Function(
              ffi.Float, ffi.Float, ffi.Int, ffi.Int)>>('GenMeshTorus');
  late final _GenMeshTorus =
      _GenMeshTorusPtr.asFunction<Mesh Function(double, double, int, int)>();

  Mesh GenMeshKnot(
    double radius,
    double size,
    int radSeg,
    int sides,
  ) {
    return _GenMeshKnot(
      radius,
      size,
      radSeg,
      sides,
    );
  }

  late final _GenMeshKnotPtr = _lookup<
      ffi.NativeFunction<
          Mesh Function(
              ffi.Float, ffi.Float, ffi.Int, ffi.Int)>>('GenMeshKnot');
  late final _GenMeshKnot =
      _GenMeshKnotPtr.asFunction<Mesh Function(double, double, int, int)>();

  Mesh GenMeshHeightmap(
    Image heightmap,
    Vector3 size,
  ) {
    return _GenMeshHeightmap(
      heightmap,
      size,
    );
  }

  late final _GenMeshHeightmapPtr =
      _lookup<ffi.NativeFunction<Mesh Function(Image, Vector3)>>(
          'GenMeshHeightmap');
  late final _GenMeshHeightmap =
      _GenMeshHeightmapPtr.asFunction<Mesh Function(Image, Vector3)>();

  Mesh GenMeshCubicmap(
    Image cubicmap,
    Vector3 cubeSize,
  ) {
    return _GenMeshCubicmap(
      cubicmap,
      cubeSize,
    );
  }

  late final _GenMeshCubicmapPtr =
      _lookup<ffi.NativeFunction<Mesh Function(Image, Vector3)>>(
          'GenMeshCubicmap');
  late final _GenMeshCubicmap =
      _GenMeshCubicmapPtr.asFunction<Mesh Function(Image, Vector3)>();

  ffi.Pointer<Material> LoadMaterials(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> materialCount,
  ) {
    return _LoadMaterials(
      fileName,
      materialCount,
    );
  }

  late final _LoadMaterialsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Material> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadMaterials');
  late final _LoadMaterials = _LoadMaterialsPtr.asFunction<
      ffi.Pointer<Material> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  Material LoadMaterialDefault() {
    return _LoadMaterialDefault();
  }

  late final _LoadMaterialDefaultPtr =
      _lookup<ffi.NativeFunction<Material Function()>>('LoadMaterialDefault');
  late final _LoadMaterialDefault =
      _LoadMaterialDefaultPtr.asFunction<Material Function()>();

  bool IsMaterialReady(
    Material material,
  ) {
    return _IsMaterialReady(
      material,
    );
  }

  late final _IsMaterialReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Material)>>(
          'IsMaterialReady');
  late final _IsMaterialReady =
      _IsMaterialReadyPtr.asFunction<bool Function(Material)>();

  void UnloadMaterial(
    Material material,
  ) {
    return _UnloadMaterial(
      material,
    );
  }

  late final _UnloadMaterialPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Material)>>(
          'UnloadMaterial');
  late final _UnloadMaterial =
      _UnloadMaterialPtr.asFunction<void Function(Material)>();

  void SetMaterialTexture(
    ffi.Pointer<Material> material,
    int mapType,
    Texture2D texture,
  ) {
    return _SetMaterialTexture(
      material,
      mapType,
      texture,
    );
  }

  late final _SetMaterialTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Material>, ffi.Int,
              Texture2D)>>('SetMaterialTexture');
  late final _SetMaterialTexture = _SetMaterialTexturePtr.asFunction<
      void Function(ffi.Pointer<Material>, int, Texture2D)>();

  void SetModelMeshMaterial(
    ffi.Pointer<Model> model,
    int meshId,
    int materialId,
  ) {
    return _SetModelMeshMaterial(
      model,
      meshId,
      materialId,
    );
  }

  late final _SetModelMeshMaterialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Model>, ffi.Int, ffi.Int)>>('SetModelMeshMaterial');
  late final _SetModelMeshMaterial = _SetModelMeshMaterialPtr.asFunction<
      void Function(ffi.Pointer<Model>, int, int)>();

  ffi.Pointer<ModelAnimation> LoadModelAnimations(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> animCount,
  ) {
    return _LoadModelAnimations(
      fileName,
      animCount,
    );
  }

  late final _LoadModelAnimationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ModelAnimation> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('LoadModelAnimations');
  late final _LoadModelAnimations = _LoadModelAnimationsPtr.asFunction<
      ffi.Pointer<ModelAnimation> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  void UpdateModelAnimation(
    Model model,
    ModelAnimation anim,
    int frame,
  ) {
    return _UpdateModelAnimation(
      model,
      anim,
      frame,
    );
  }

  late final _UpdateModelAnimationPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Model, ModelAnimation, ffi.Int)>>(
      'UpdateModelAnimation');
  late final _UpdateModelAnimation = _UpdateModelAnimationPtr.asFunction<
      void Function(Model, ModelAnimation, int)>();

  void UnloadModelAnimation(
    ModelAnimation anim,
  ) {
    return _UnloadModelAnimation(
      anim,
    );
  }

  late final _UnloadModelAnimationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ModelAnimation)>>(
          'UnloadModelAnimation');
  late final _UnloadModelAnimation =
      _UnloadModelAnimationPtr.asFunction<void Function(ModelAnimation)>();

  void UnloadModelAnimations(
    ffi.Pointer<ModelAnimation> animations,
    int animCount,
  ) {
    return _UnloadModelAnimations(
      animations,
      animCount,
    );
  }

  late final _UnloadModelAnimationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ModelAnimation>, ffi.Int)>>('UnloadModelAnimations');
  late final _UnloadModelAnimations = _UnloadModelAnimationsPtr.asFunction<
      void Function(ffi.Pointer<ModelAnimation>, int)>();

  bool IsModelAnimationValid(
    Model model,
    ModelAnimation anim,
  ) {
    return _IsModelAnimationValid(
      model,
      anim,
    );
  }

  late final _IsModelAnimationValidPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Model, ModelAnimation)>>(
          'IsModelAnimationValid');
  late final _IsModelAnimationValid = _IsModelAnimationValidPtr.asFunction<
      bool Function(Model, ModelAnimation)>();

  bool CheckCollisionSpheres(
    Vector3 center1,
    double radius1,
    Vector3 center2,
    double radius2,
  ) {
    return _CheckCollisionSpheres(
      center1,
      radius1,
      center2,
      radius2,
    );
  }

  late final _CheckCollisionSpheresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Vector3, ffi.Float, Vector3,
              ffi.Float)>>('CheckCollisionSpheres');
  late final _CheckCollisionSpheres = _CheckCollisionSpheresPtr.asFunction<
      bool Function(Vector3, double, Vector3, double)>();

  bool CheckCollisionBoxes(
    BoundingBox box1,
    BoundingBox box2,
  ) {
    return _CheckCollisionBoxes(
      box1,
      box2,
    );
  }

  late final _CheckCollisionBoxesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(BoundingBox, BoundingBox)>>(
          'CheckCollisionBoxes');
  late final _CheckCollisionBoxes = _CheckCollisionBoxesPtr.asFunction<
      bool Function(BoundingBox, BoundingBox)>();

  bool CheckCollisionBoxSphere(
    BoundingBox box,
    Vector3 center,
    double radius,
  ) {
    return _CheckCollisionBoxSphere(
      box,
      center,
      radius,
    );
  }

  late final _CheckCollisionBoxSpherePtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(BoundingBox, Vector3, ffi.Float)>>(
      'CheckCollisionBoxSphere');
  late final _CheckCollisionBoxSphere = _CheckCollisionBoxSpherePtr.asFunction<
      bool Function(BoundingBox, Vector3, double)>();

  RayCollision GetRayCollisionSphere(
    Ray ray,
    Vector3 center,
    double radius,
  ) {
    return _GetRayCollisionSphere(
      ray,
      center,
      radius,
    );
  }

  late final _GetRayCollisionSpherePtr = _lookup<
          ffi.NativeFunction<RayCollision Function(Ray, Vector3, ffi.Float)>>(
      'GetRayCollisionSphere');
  late final _GetRayCollisionSphere = _GetRayCollisionSpherePtr.asFunction<
      RayCollision Function(Ray, Vector3, double)>();

  RayCollision GetRayCollisionBox(
    Ray ray,
    BoundingBox box,
  ) {
    return _GetRayCollisionBox(
      ray,
      box,
    );
  }

  late final _GetRayCollisionBoxPtr =
      _lookup<ffi.NativeFunction<RayCollision Function(Ray, BoundingBox)>>(
          'GetRayCollisionBox');
  late final _GetRayCollisionBox = _GetRayCollisionBoxPtr.asFunction<
      RayCollision Function(Ray, BoundingBox)>();

  RayCollision GetRayCollisionMesh(
    Ray ray,
    Mesh mesh,
    Matrix transform,
  ) {
    return _GetRayCollisionMesh(
      ray,
      mesh,
      transform,
    );
  }

  late final _GetRayCollisionMeshPtr =
      _lookup<ffi.NativeFunction<RayCollision Function(Ray, Mesh, Matrix)>>(
          'GetRayCollisionMesh');
  late final _GetRayCollisionMesh = _GetRayCollisionMeshPtr.asFunction<
      RayCollision Function(Ray, Mesh, Matrix)>();

  RayCollision GetRayCollisionTriangle(
    Ray ray,
    Vector3 p1,
    Vector3 p2,
    Vector3 p3,
  ) {
    return _GetRayCollisionTriangle(
      ray,
      p1,
      p2,
      p3,
    );
  }

  late final _GetRayCollisionTrianglePtr = _lookup<
      ffi.NativeFunction<
          RayCollision Function(
              Ray, Vector3, Vector3, Vector3)>>('GetRayCollisionTriangle');
  late final _GetRayCollisionTriangle = _GetRayCollisionTrianglePtr.asFunction<
      RayCollision Function(Ray, Vector3, Vector3, Vector3)>();

  RayCollision GetRayCollisionQuad(
    Ray ray,
    Vector3 p1,
    Vector3 p2,
    Vector3 p3,
    Vector3 p4,
  ) {
    return _GetRayCollisionQuad(
      ray,
      p1,
      p2,
      p3,
      p4,
    );
  }

  late final _GetRayCollisionQuadPtr = _lookup<
      ffi.NativeFunction<
          RayCollision Function(
              Ray, Vector3, Vector3, Vector3, Vector3)>>('GetRayCollisionQuad');
  late final _GetRayCollisionQuad = _GetRayCollisionQuadPtr.asFunction<
      RayCollision Function(Ray, Vector3, Vector3, Vector3, Vector3)>();

  void InitAudioDevice() {
    return _InitAudioDevice();
  }

  late final _InitAudioDevicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('InitAudioDevice');
  late final _InitAudioDevice =
      _InitAudioDevicePtr.asFunction<void Function()>();

  void CloseAudioDevice() {
    return _CloseAudioDevice();
  }

  late final _CloseAudioDevicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CloseAudioDevice');
  late final _CloseAudioDevice =
      _CloseAudioDevicePtr.asFunction<void Function()>();

  bool IsAudioDeviceReady() {
    return _IsAudioDeviceReady();
  }

  late final _IsAudioDeviceReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsAudioDeviceReady');
  late final _IsAudioDeviceReady =
      _IsAudioDeviceReadyPtr.asFunction<bool Function()>();

  void SetMasterVolume(
    double volume,
  ) {
    return _SetMasterVolume(
      volume,
    );
  }

  late final _SetMasterVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'SetMasterVolume');
  late final _SetMasterVolume =
      _SetMasterVolumePtr.asFunction<void Function(double)>();

  double GetMasterVolume() {
    return _GetMasterVolume();
  }

  late final _GetMasterVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetMasterVolume');
  late final _GetMasterVolume =
      _GetMasterVolumePtr.asFunction<double Function()>();

  Wave LoadWave(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadWave(
      fileName,
    );
  }

  late final _LoadWavePtr =
      _lookup<ffi.NativeFunction<Wave Function(ffi.Pointer<ffi.Char>)>>(
          'LoadWave');
  late final _LoadWave =
      _LoadWavePtr.asFunction<Wave Function(ffi.Pointer<ffi.Char>)>();

  Wave LoadWaveFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
  ) {
    return _LoadWaveFromMemory(
      fileType,
      fileData,
      dataSize,
    );
  }

  late final _LoadWaveFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          Wave Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('LoadWaveFromMemory');
  late final _LoadWaveFromMemory = _LoadWaveFromMemoryPtr.asFunction<
      Wave Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  bool IsWaveReady(
    Wave wave,
  ) {
    return _IsWaveReady(
      wave,
    );
  }

  late final _IsWaveReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Wave)>>('IsWaveReady');
  late final _IsWaveReady = _IsWaveReadyPtr.asFunction<bool Function(Wave)>();

  Sound LoadSound(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadSound(
      fileName,
    );
  }

  late final _LoadSoundPtr =
      _lookup<ffi.NativeFunction<Sound Function(ffi.Pointer<ffi.Char>)>>(
          'LoadSound');
  late final _LoadSound =
      _LoadSoundPtr.asFunction<Sound Function(ffi.Pointer<ffi.Char>)>();

  Sound LoadSoundFromWave(
    Wave wave,
  ) {
    return _LoadSoundFromWave(
      wave,
    );
  }

  late final _LoadSoundFromWavePtr =
      _lookup<ffi.NativeFunction<Sound Function(Wave)>>('LoadSoundFromWave');
  late final _LoadSoundFromWave =
      _LoadSoundFromWavePtr.asFunction<Sound Function(Wave)>();

  Sound LoadSoundAlias(
    Sound source,
  ) {
    return _LoadSoundAlias(
      source,
    );
  }

  late final _LoadSoundAliasPtr =
      _lookup<ffi.NativeFunction<Sound Function(Sound)>>('LoadSoundAlias');
  late final _LoadSoundAlias =
      _LoadSoundAliasPtr.asFunction<Sound Function(Sound)>();

  bool IsSoundReady(
    Sound sound,
  ) {
    return _IsSoundReady(
      sound,
    );
  }

  late final _IsSoundReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Sound)>>('IsSoundReady');
  late final _IsSoundReady =
      _IsSoundReadyPtr.asFunction<bool Function(Sound)>();

  void UpdateSound(
    Sound sound,
    ffi.Pointer<ffi.Void> data,
    int sampleCount,
  ) {
    return _UpdateSound(
      sound,
      data,
      sampleCount,
    );
  }

  late final _UpdateSoundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Sound, ffi.Pointer<ffi.Void>, ffi.Int)>>('UpdateSound');
  late final _UpdateSound = _UpdateSoundPtr.asFunction<
      void Function(Sound, ffi.Pointer<ffi.Void>, int)>();

  void UnloadWave(
    Wave wave,
  ) {
    return _UnloadWave(
      wave,
    );
  }

  late final _UnloadWavePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Wave)>>('UnloadWave');
  late final _UnloadWave = _UnloadWavePtr.asFunction<void Function(Wave)>();

  void UnloadSound(
    Sound sound,
  ) {
    return _UnloadSound(
      sound,
    );
  }

  late final _UnloadSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('UnloadSound');
  late final _UnloadSound = _UnloadSoundPtr.asFunction<void Function(Sound)>();

  void UnloadSoundAlias(
    Sound alias,
  ) {
    return _UnloadSoundAlias(
      alias,
    );
  }

  late final _UnloadSoundAliasPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('UnloadSoundAlias');
  late final _UnloadSoundAlias =
      _UnloadSoundAliasPtr.asFunction<void Function(Sound)>();

  bool ExportWave(
    Wave wave,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportWave(
      wave,
      fileName,
    );
  }

  late final _ExportWavePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Wave, ffi.Pointer<ffi.Char>)>>(
      'ExportWave');
  late final _ExportWave =
      _ExportWavePtr.asFunction<bool Function(Wave, ffi.Pointer<ffi.Char>)>();

  bool ExportWaveAsCode(
    Wave wave,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportWaveAsCode(
      wave,
      fileName,
    );
  }

  late final _ExportWaveAsCodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Wave, ffi.Pointer<ffi.Char>)>>(
      'ExportWaveAsCode');
  late final _ExportWaveAsCode = _ExportWaveAsCodePtr.asFunction<
      bool Function(Wave, ffi.Pointer<ffi.Char>)>();

  void PlaySound(
    Sound sound,
  ) {
    return _PlaySound(
      sound,
    );
  }

  late final _PlaySoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('PlaySound');
  late final _PlaySound = _PlaySoundPtr.asFunction<void Function(Sound)>();

  void StopSound(
    Sound sound,
  ) {
    return _StopSound(
      sound,
    );
  }

  late final _StopSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('StopSound');
  late final _StopSound = _StopSoundPtr.asFunction<void Function(Sound)>();

  void PauseSound(
    Sound sound,
  ) {
    return _PauseSound(
      sound,
    );
  }

  late final _PauseSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('PauseSound');
  late final _PauseSound = _PauseSoundPtr.asFunction<void Function(Sound)>();

  void ResumeSound(
    Sound sound,
  ) {
    return _ResumeSound(
      sound,
    );
  }

  late final _ResumeSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('ResumeSound');
  late final _ResumeSound = _ResumeSoundPtr.asFunction<void Function(Sound)>();

  bool IsSoundPlaying(
    Sound sound,
  ) {
    return _IsSoundPlaying(
      sound,
    );
  }

  late final _IsSoundPlayingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Sound)>>('IsSoundPlaying');
  late final _IsSoundPlaying =
      _IsSoundPlayingPtr.asFunction<bool Function(Sound)>();

  void SetSoundVolume(
    Sound sound,
    double volume,
  ) {
    return _SetSoundVolume(
      sound,
      volume,
    );
  }

  late final _SetSoundVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound, ffi.Float)>>(
          'SetSoundVolume');
  late final _SetSoundVolume =
      _SetSoundVolumePtr.asFunction<void Function(Sound, double)>();

  void SetSoundPitch(
    Sound sound,
    double pitch,
  ) {
    return _SetSoundPitch(
      sound,
      pitch,
    );
  }

  late final _SetSoundPitchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound, ffi.Float)>>(
          'SetSoundPitch');
  late final _SetSoundPitch =
      _SetSoundPitchPtr.asFunction<void Function(Sound, double)>();

  void SetSoundPan(
    Sound sound,
    double pan,
  ) {
    return _SetSoundPan(
      sound,
      pan,
    );
  }

  late final _SetSoundPanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound, ffi.Float)>>(
          'SetSoundPan');
  late final _SetSoundPan =
      _SetSoundPanPtr.asFunction<void Function(Sound, double)>();

  Wave WaveCopy(
    Wave wave,
  ) {
    return _WaveCopy(
      wave,
    );
  }

  late final _WaveCopyPtr =
      _lookup<ffi.NativeFunction<Wave Function(Wave)>>('WaveCopy');
  late final _WaveCopy = _WaveCopyPtr.asFunction<Wave Function(Wave)>();

  void WaveCrop(
    ffi.Pointer<Wave> wave,
    int initSample,
    int finalSample,
  ) {
    return _WaveCrop(
      wave,
      initSample,
      finalSample,
    );
  }

  late final _WaveCropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Wave>, ffi.Int, ffi.Int)>>('WaveCrop');
  late final _WaveCrop =
      _WaveCropPtr.asFunction<void Function(ffi.Pointer<Wave>, int, int)>();

  void WaveFormat(
    ffi.Pointer<Wave> wave,
    int sampleRate,
    int sampleSize,
    int channels,
  ) {
    return _WaveFormat(
      wave,
      sampleRate,
      sampleSize,
      channels,
    );
  }

  late final _WaveFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Wave>, ffi.Int, ffi.Int, ffi.Int)>>('WaveFormat');
  late final _WaveFormat = _WaveFormatPtr.asFunction<
      void Function(ffi.Pointer<Wave>, int, int, int)>();

  ffi.Pointer<ffi.Float> LoadWaveSamples(
    Wave wave,
  ) {
    return _LoadWaveSamples(
      wave,
    );
  }

  late final _LoadWaveSamplesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(Wave)>>(
          'LoadWaveSamples');
  late final _LoadWaveSamples =
      _LoadWaveSamplesPtr.asFunction<ffi.Pointer<ffi.Float> Function(Wave)>();

  void UnloadWaveSamples(
    ffi.Pointer<ffi.Float> samples,
  ) {
    return _UnloadWaveSamples(
      samples,
    );
  }

  late final _UnloadWaveSamplesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Float>)>>(
          'UnloadWaveSamples');
  late final _UnloadWaveSamples =
      _UnloadWaveSamplesPtr.asFunction<void Function(ffi.Pointer<ffi.Float>)>();

  Music LoadMusicStream(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadMusicStream(
      fileName,
    );
  }

  late final _LoadMusicStreamPtr =
      _lookup<ffi.NativeFunction<Music Function(ffi.Pointer<ffi.Char>)>>(
          'LoadMusicStream');
  late final _LoadMusicStream =
      _LoadMusicStreamPtr.asFunction<Music Function(ffi.Pointer<ffi.Char>)>();

  Music LoadMusicStreamFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
  ) {
    return _LoadMusicStreamFromMemory(
      fileType,
      data,
      dataSize,
    );
  }

  late final _LoadMusicStreamFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          Music Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('LoadMusicStreamFromMemory');
  late final _LoadMusicStreamFromMemory =
      _LoadMusicStreamFromMemoryPtr.asFunction<
          Music Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  bool IsMusicReady(
    Music music,
  ) {
    return _IsMusicReady(
      music,
    );
  }

  late final _IsMusicReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Music)>>('IsMusicReady');
  late final _IsMusicReady =
      _IsMusicReadyPtr.asFunction<bool Function(Music)>();

  void UnloadMusicStream(
    Music music,
  ) {
    return _UnloadMusicStream(
      music,
    );
  }

  late final _UnloadMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>(
          'UnloadMusicStream');
  late final _UnloadMusicStream =
      _UnloadMusicStreamPtr.asFunction<void Function(Music)>();

  void PlayMusicStream(
    Music music,
  ) {
    return _PlayMusicStream(
      music,
    );
  }

  late final _PlayMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>('PlayMusicStream');
  late final _PlayMusicStream =
      _PlayMusicStreamPtr.asFunction<void Function(Music)>();

  bool IsMusicStreamPlaying(
    Music music,
  ) {
    return _IsMusicStreamPlaying(
      music,
    );
  }

  late final _IsMusicStreamPlayingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Music)>>(
          'IsMusicStreamPlaying');
  late final _IsMusicStreamPlaying =
      _IsMusicStreamPlayingPtr.asFunction<bool Function(Music)>();

  void UpdateMusicStream(
    Music music,
  ) {
    return _UpdateMusicStream(
      music,
    );
  }

  late final _UpdateMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>(
          'UpdateMusicStream');
  late final _UpdateMusicStream =
      _UpdateMusicStreamPtr.asFunction<void Function(Music)>();

  void StopMusicStream(
    Music music,
  ) {
    return _StopMusicStream(
      music,
    );
  }

  late final _StopMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>('StopMusicStream');
  late final _StopMusicStream =
      _StopMusicStreamPtr.asFunction<void Function(Music)>();

  void PauseMusicStream(
    Music music,
  ) {
    return _PauseMusicStream(
      music,
    );
  }

  late final _PauseMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>('PauseMusicStream');
  late final _PauseMusicStream =
      _PauseMusicStreamPtr.asFunction<void Function(Music)>();

  void ResumeMusicStream(
    Music music,
  ) {
    return _ResumeMusicStream(
      music,
    );
  }

  late final _ResumeMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>(
          'ResumeMusicStream');
  late final _ResumeMusicStream =
      _ResumeMusicStreamPtr.asFunction<void Function(Music)>();

  void SeekMusicStream(
    Music music,
    double position,
  ) {
    return _SeekMusicStream(
      music,
      position,
    );
  }

  late final _SeekMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music, ffi.Float)>>(
          'SeekMusicStream');
  late final _SeekMusicStream =
      _SeekMusicStreamPtr.asFunction<void Function(Music, double)>();

  void SetMusicVolume(
    Music music,
    double volume,
  ) {
    return _SetMusicVolume(
      music,
      volume,
    );
  }

  late final _SetMusicVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music, ffi.Float)>>(
          'SetMusicVolume');
  late final _SetMusicVolume =
      _SetMusicVolumePtr.asFunction<void Function(Music, double)>();

  void SetMusicPitch(
    Music music,
    double pitch,
  ) {
    return _SetMusicPitch(
      music,
      pitch,
    );
  }

  late final _SetMusicPitchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music, ffi.Float)>>(
          'SetMusicPitch');
  late final _SetMusicPitch =
      _SetMusicPitchPtr.asFunction<void Function(Music, double)>();

  void SetMusicPan(
    Music music,
    double pan,
  ) {
    return _SetMusicPan(
      music,
      pan,
    );
  }

  late final _SetMusicPanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music, ffi.Float)>>(
          'SetMusicPan');
  late final _SetMusicPan =
      _SetMusicPanPtr.asFunction<void Function(Music, double)>();

  double GetMusicTimeLength(
    Music music,
  ) {
    return _GetMusicTimeLength(
      music,
    );
  }

  late final _GetMusicTimeLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(Music)>>(
          'GetMusicTimeLength');
  late final _GetMusicTimeLength =
      _GetMusicTimeLengthPtr.asFunction<double Function(Music)>();

  double GetMusicTimePlayed(
    Music music,
  ) {
    return _GetMusicTimePlayed(
      music,
    );
  }

  late final _GetMusicTimePlayedPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(Music)>>(
          'GetMusicTimePlayed');
  late final _GetMusicTimePlayed =
      _GetMusicTimePlayedPtr.asFunction<double Function(Music)>();

  AudioStream LoadAudioStream(
    int sampleRate,
    int sampleSize,
    int channels,
  ) {
    return _LoadAudioStream(
      sampleRate,
      sampleSize,
      channels,
    );
  }

  late final _LoadAudioStreamPtr = _lookup<
      ffi.NativeFunction<
          AudioStream Function(ffi.UnsignedInt, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('LoadAudioStream');
  late final _LoadAudioStream =
      _LoadAudioStreamPtr.asFunction<AudioStream Function(int, int, int)>();

  bool IsAudioStreamReady(
    AudioStream stream,
  ) {
    return _IsAudioStreamReady(
      stream,
    );
  }

  late final _IsAudioStreamReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(AudioStream)>>(
          'IsAudioStreamReady');
  late final _IsAudioStreamReady =
      _IsAudioStreamReadyPtr.asFunction<bool Function(AudioStream)>();

  void UnloadAudioStream(
    AudioStream stream,
  ) {
    return _UnloadAudioStream(
      stream,
    );
  }

  late final _UnloadAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream)>>(
          'UnloadAudioStream');
  late final _UnloadAudioStream =
      _UnloadAudioStreamPtr.asFunction<void Function(AudioStream)>();

  void UpdateAudioStream(
    AudioStream stream,
    ffi.Pointer<ffi.Void> data,
    int frameCount,
  ) {
    return _UpdateAudioStream(
      stream,
      data,
      frameCount,
    );
  }

  late final _UpdateAudioStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(AudioStream, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('UpdateAudioStream');
  late final _UpdateAudioStream = _UpdateAudioStreamPtr.asFunction<
      void Function(AudioStream, ffi.Pointer<ffi.Void>, int)>();

  bool IsAudioStreamProcessed(
    AudioStream stream,
  ) {
    return _IsAudioStreamProcessed(
      stream,
    );
  }

  late final _IsAudioStreamProcessedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(AudioStream)>>(
          'IsAudioStreamProcessed');
  late final _IsAudioStreamProcessed =
      _IsAudioStreamProcessedPtr.asFunction<bool Function(AudioStream)>();

  void PlayAudioStream(
    AudioStream stream,
  ) {
    return _PlayAudioStream(
      stream,
    );
  }

  late final _PlayAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream)>>(
          'PlayAudioStream');
  late final _PlayAudioStream =
      _PlayAudioStreamPtr.asFunction<void Function(AudioStream)>();

  void PauseAudioStream(
    AudioStream stream,
  ) {
    return _PauseAudioStream(
      stream,
    );
  }

  late final _PauseAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream)>>(
          'PauseAudioStream');
  late final _PauseAudioStream =
      _PauseAudioStreamPtr.asFunction<void Function(AudioStream)>();

  void ResumeAudioStream(
    AudioStream stream,
  ) {
    return _ResumeAudioStream(
      stream,
    );
  }

  late final _ResumeAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream)>>(
          'ResumeAudioStream');
  late final _ResumeAudioStream =
      _ResumeAudioStreamPtr.asFunction<void Function(AudioStream)>();

  bool IsAudioStreamPlaying(
    AudioStream stream,
  ) {
    return _IsAudioStreamPlaying(
      stream,
    );
  }

  late final _IsAudioStreamPlayingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(AudioStream)>>(
          'IsAudioStreamPlaying');
  late final _IsAudioStreamPlaying =
      _IsAudioStreamPlayingPtr.asFunction<bool Function(AudioStream)>();

  void StopAudioStream(
    AudioStream stream,
  ) {
    return _StopAudioStream(
      stream,
    );
  }

  late final _StopAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream)>>(
          'StopAudioStream');
  late final _StopAudioStream =
      _StopAudioStreamPtr.asFunction<void Function(AudioStream)>();

  void SetAudioStreamVolume(
    AudioStream stream,
    double volume,
  ) {
    return _SetAudioStreamVolume(
      stream,
      volume,
    );
  }

  late final _SetAudioStreamVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream, ffi.Float)>>(
          'SetAudioStreamVolume');
  late final _SetAudioStreamVolume =
      _SetAudioStreamVolumePtr.asFunction<void Function(AudioStream, double)>();

  void SetAudioStreamPitch(
    AudioStream stream,
    double pitch,
  ) {
    return _SetAudioStreamPitch(
      stream,
      pitch,
    );
  }

  late final _SetAudioStreamPitchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream, ffi.Float)>>(
          'SetAudioStreamPitch');
  late final _SetAudioStreamPitch =
      _SetAudioStreamPitchPtr.asFunction<void Function(AudioStream, double)>();

  void SetAudioStreamPan(
    AudioStream stream,
    double pan,
  ) {
    return _SetAudioStreamPan(
      stream,
      pan,
    );
  }

  late final _SetAudioStreamPanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream, ffi.Float)>>(
          'SetAudioStreamPan');
  late final _SetAudioStreamPan =
      _SetAudioStreamPanPtr.asFunction<void Function(AudioStream, double)>();

  void SetAudioStreamBufferSizeDefault(
    int size,
  ) {
    return _SetAudioStreamBufferSizeDefault(
      size,
    );
  }

  late final _SetAudioStreamBufferSizeDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetAudioStreamBufferSizeDefault');
  late final _SetAudioStreamBufferSizeDefault =
      _SetAudioStreamBufferSizeDefaultPtr.asFunction<void Function(int)>();

  void SetAudioStreamCallback(
    AudioStream stream,
    AudioCallback callback,
  ) {
    return _SetAudioStreamCallback(
      stream,
      callback,
    );
  }

  late final _SetAudioStreamCallbackPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(AudioStream, AudioCallback)>>(
      'SetAudioStreamCallback');
  late final _SetAudioStreamCallback = _SetAudioStreamCallbackPtr.asFunction<
      void Function(AudioStream, AudioCallback)>();

  void AttachAudioStreamProcessor(
    AudioStream stream,
    AudioCallback processor,
  ) {
    return _AttachAudioStreamProcessor(
      stream,
      processor,
    );
  }

  late final _AttachAudioStreamProcessorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(AudioStream, AudioCallback)>>(
      'AttachAudioStreamProcessor');
  late final _AttachAudioStreamProcessor = _AttachAudioStreamProcessorPtr
      .asFunction<void Function(AudioStream, AudioCallback)>();

  void DetachAudioStreamProcessor(
    AudioStream stream,
    AudioCallback processor,
  ) {
    return _DetachAudioStreamProcessor(
      stream,
      processor,
    );
  }

  late final _DetachAudioStreamProcessorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(AudioStream, AudioCallback)>>(
      'DetachAudioStreamProcessor');
  late final _DetachAudioStreamProcessor = _DetachAudioStreamProcessorPtr
      .asFunction<void Function(AudioStream, AudioCallback)>();

  void AttachAudioMixedProcessor(
    AudioCallback processor,
  ) {
    return _AttachAudioMixedProcessor(
      processor,
    );
  }

  late final _AttachAudioMixedProcessorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioCallback)>>(
          'AttachAudioMixedProcessor');
  late final _AttachAudioMixedProcessor =
      _AttachAudioMixedProcessorPtr.asFunction<void Function(AudioCallback)>();

  void DetachAudioMixedProcessor(
    AudioCallback processor,
  ) {
    return _DetachAudioMixedProcessor(
      processor,
    );
  }

  late final _DetachAudioMixedProcessorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioCallback)>>(
          'DetachAudioMixedProcessor');
  late final _DetachAudioMixedProcessor =
      _DetachAudioMixedProcessorPtr.asFunction<void Function(AudioCallback)>();
}

typedef va_list = ffi.Pointer<ffi.Char>;

final class Vector2 extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;
}

final class Vector3 extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double z;
}

final class Vector4 extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double z;

  @ffi.Float()
  external double w;
}

final class Matrix extends ffi.Struct {
  @ffi.Float()
  external double m0;

  @ffi.Float()
  external double m4;

  @ffi.Float()
  external double m8;

  @ffi.Float()
  external double m12;

  @ffi.Float()
  external double m1;

  @ffi.Float()
  external double m5;

  @ffi.Float()
  external double m9;

  @ffi.Float()
  external double m13;

  @ffi.Float()
  external double m2;

  @ffi.Float()
  external double m6;

  @ffi.Float()
  external double m10;

  @ffi.Float()
  external double m14;

  @ffi.Float()
  external double m3;

  @ffi.Float()
  external double m7;

  @ffi.Float()
  external double m11;

  @ffi.Float()
  external double m15;
}

final class Color extends ffi.Struct {
  @ffi.UnsignedChar()
  external int r;

  @ffi.UnsignedChar()
  external int g;

  @ffi.UnsignedChar()
  external int b;

  @ffi.UnsignedChar()
  external int a;
}

final class Rectangle extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double width;

  @ffi.Float()
  external double height;
}

final class Image extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int mipmaps;

  @ffi.Int()
  external int format;
}

final class Texture extends ffi.Struct {
  @ffi.UnsignedInt()
  external int id;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int mipmaps;

  @ffi.Int()
  external int format;
}

final class RenderTexture extends ffi.Struct {
  @ffi.UnsignedInt()
  external int id;

  external Texture texture;

  external Texture depth;
}

final class NPatchInfo extends ffi.Struct {
  external Rectangle source;

  @ffi.Int()
  external int left;

  @ffi.Int()
  external int top;

  @ffi.Int()
  external int right;

  @ffi.Int()
  external int bottom;

  @ffi.Int()
  external int layout;
}

final class GlyphInfo extends ffi.Struct {
  @ffi.Int()
  external int value;

  @ffi.Int()
  external int offsetX;

  @ffi.Int()
  external int offsetY;

  @ffi.Int()
  external int advanceX;

  external Image image;
}

final class Font extends ffi.Struct {
  @ffi.Int()
  external int baseSize;

  @ffi.Int()
  external int glyphCount;

  @ffi.Int()
  external int glyphPadding;

  external Texture2D texture;

  external ffi.Pointer<Rectangle> recs;

  external ffi.Pointer<GlyphInfo> glyphs;
}

typedef Texture2D = Texture;

final class Camera3D extends ffi.Struct {
  external Vector3 position;

  external Vector3 target;

  external Vector3 up;

  @ffi.Float()
  external double fovy;

  @ffi.Int()
  external int projection;
}

final class Camera2D extends ffi.Struct {
  external Vector2 offset;

  external Vector2 target;

  @ffi.Float()
  external double rotation;

  @ffi.Float()
  external double zoom;
}

final class Mesh extends ffi.Struct {
  @ffi.Int()
  external int vertexCount;

  @ffi.Int()
  external int triangleCount;

  external ffi.Pointer<ffi.Float> vertices;

  external ffi.Pointer<ffi.Float> texcoords;

  external ffi.Pointer<ffi.Float> texcoords2;

  external ffi.Pointer<ffi.Float> normals;

  external ffi.Pointer<ffi.Float> tangents;

  external ffi.Pointer<ffi.UnsignedChar> colors;

  external ffi.Pointer<ffi.UnsignedShort> indices;

  external ffi.Pointer<ffi.Float> animVertices;

  external ffi.Pointer<ffi.Float> animNormals;

  external ffi.Pointer<ffi.UnsignedChar> boneIds;

  external ffi.Pointer<ffi.Float> boneWeights;

  @ffi.UnsignedInt()
  external int vaoId;

  external ffi.Pointer<ffi.UnsignedInt> vboId;
}

final class Shader extends ffi.Struct {
  @ffi.UnsignedInt()
  external int id;

  external ffi.Pointer<ffi.Int> locs;
}

final class MaterialMap extends ffi.Struct {
  external Texture2D texture;

  external Color color;

  @ffi.Float()
  external double value;
}

final class Material extends ffi.Struct {
  external Shader shader;

  external ffi.Pointer<MaterialMap> maps;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> params;
}

final class Transform extends ffi.Struct {
  external Vector3 translation;

  external Quaternion rotation;

  external Vector3 scale;
}

typedef Quaternion = Vector4;

final class BoneInfo extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> name;

  @ffi.Int()
  external int parent;
}

final class Model extends ffi.Struct {
  external Matrix transform;

  @ffi.Int()
  external int meshCount;

  @ffi.Int()
  external int materialCount;

  external ffi.Pointer<Mesh> meshes;

  external ffi.Pointer<Material> materials;

  external ffi.Pointer<ffi.Int> meshMaterial;

  @ffi.Int()
  external int boneCount;

  external ffi.Pointer<BoneInfo> bones;

  external ffi.Pointer<Transform> bindPose;
}

final class ModelAnimation extends ffi.Struct {
  @ffi.Int()
  external int boneCount;

  @ffi.Int()
  external int frameCount;

  external ffi.Pointer<BoneInfo> bones;

  external ffi.Pointer<ffi.Pointer<Transform>> framePoses;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> name;
}

final class Ray extends ffi.Struct {
  external Vector3 position;

  external Vector3 direction;
}

final class RayCollision extends ffi.Struct {
  @ffi.Bool()
  external bool hit;

  @ffi.Float()
  external double distance;

  external Vector3 point;

  external Vector3 normal;
}

final class BoundingBox extends ffi.Struct {
  external Vector3 min;

  external Vector3 max;
}

final class Wave extends ffi.Struct {
  @ffi.UnsignedInt()
  external int frameCount;

  @ffi.UnsignedInt()
  external int sampleRate;

  @ffi.UnsignedInt()
  external int sampleSize;

  @ffi.UnsignedInt()
  external int channels;

  external ffi.Pointer<ffi.Void> data;
}

final class rAudioBuffer extends ffi.Opaque {}

final class rAudioProcessor extends ffi.Opaque {}

final class AudioStream extends ffi.Struct {
  external ffi.Pointer<rAudioBuffer> buffer;

  external ffi.Pointer<rAudioProcessor> processor;

  @ffi.UnsignedInt()
  external int sampleRate;

  @ffi.UnsignedInt()
  external int sampleSize;

  @ffi.UnsignedInt()
  external int channels;
}

final class Sound extends ffi.Struct {
  external AudioStream stream;

  @ffi.UnsignedInt()
  external int frameCount;
}

final class Music extends ffi.Struct {
  external AudioStream stream;

  @ffi.UnsignedInt()
  external int frameCount;

  @ffi.Bool()
  external bool looping;

  @ffi.Int()
  external int ctxType;

  external ffi.Pointer<ffi.Void> ctxData;
}

final class VrDeviceInfo extends ffi.Struct {
  @ffi.Int()
  external int hResolution;

  @ffi.Int()
  external int vResolution;

  @ffi.Float()
  external double hScreenSize;

  @ffi.Float()
  external double vScreenSize;

  @ffi.Float()
  external double vScreenCenter;

  @ffi.Float()
  external double eyeToScreenDistance;

  @ffi.Float()
  external double lensSeparationDistance;

  @ffi.Float()
  external double interpupillaryDistance;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> lensDistortionValues;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> chromaAbCorrection;
}

final class VrStereoConfig extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<Matrix> projection;

  @ffi.Array.multi([2])
  external ffi.Array<Matrix> viewOffset;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> leftLensCenter;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> rightLensCenter;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> leftScreenCenter;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> rightScreenCenter;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> scale;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> scaleIn;
}

final class FilePathList extends ffi.Struct {
  @ffi.UnsignedInt()
  external int capacity;

  @ffi.UnsignedInt()
  external int count;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> paths;
}

final class AutomationEvent extends ffi.Struct {
  @ffi.UnsignedInt()
  external int frame;

  @ffi.UnsignedInt()
  external int type;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> params;
}

final class AutomationEventList extends ffi.Struct {
  @ffi.UnsignedInt()
  external int capacity;

  @ffi.UnsignedInt()
  external int count;

  external ffi.Pointer<AutomationEvent> events;
}

abstract class ConfigFlags {
  static const int FLAG_VSYNC_HINT = 64;
  static const int FLAG_FULLSCREEN_MODE = 2;
  static const int FLAG_WINDOW_RESIZABLE = 4;
  static const int FLAG_WINDOW_UNDECORATED = 8;
  static const int FLAG_WINDOW_HIDDEN = 128;
  static const int FLAG_WINDOW_MINIMIZED = 512;
  static const int FLAG_WINDOW_MAXIMIZED = 1024;
  static const int FLAG_WINDOW_UNFOCUSED = 2048;
  static const int FLAG_WINDOW_TOPMOST = 4096;
  static const int FLAG_WINDOW_ALWAYS_RUN = 256;
  static const int FLAG_WINDOW_TRANSPARENT = 16;
  static const int FLAG_WINDOW_HIGHDPI = 8192;
  static const int FLAG_WINDOW_MOUSE_PASSTHROUGH = 16384;
  static const int FLAG_BORDERLESS_WINDOWED_MODE = 32768;
  static const int FLAG_MSAA_4X_HINT = 32;
  static const int FLAG_INTERLACED_HINT = 65536;
}

abstract class TraceLogLevel {
  static const int LOG_ALL = 0;
  static const int LOG_TRACE = 1;
  static const int LOG_DEBUG = 2;
  static const int LOG_INFO = 3;
  static const int LOG_WARNING = 4;
  static const int LOG_ERROR = 5;
  static const int LOG_FATAL = 6;
  static const int LOG_NONE = 7;
}

abstract class KeyboardKey {
  static const int KEY_NULL = 0;
  static const int KEY_APOSTROPHE = 39;
  static const int KEY_COMMA = 44;
  static const int KEY_MINUS = 45;
  static const int KEY_PERIOD = 46;
  static const int KEY_SLASH = 47;
  static const int KEY_ZERO = 48;
  static const int KEY_ONE = 49;
  static const int KEY_TWO = 50;
  static const int KEY_THREE = 51;
  static const int KEY_FOUR = 52;
  static const int KEY_FIVE = 53;
  static const int KEY_SIX = 54;
  static const int KEY_SEVEN = 55;
  static const int KEY_EIGHT = 56;
  static const int KEY_NINE = 57;
  static const int KEY_SEMICOLON = 59;
  static const int KEY_EQUAL = 61;
  static const int KEY_A = 65;
  static const int KEY_B = 66;
  static const int KEY_C = 67;
  static const int KEY_D = 68;
  static const int KEY_E = 69;
  static const int KEY_F = 70;
  static const int KEY_G = 71;
  static const int KEY_H = 72;
  static const int KEY_I = 73;
  static const int KEY_J = 74;
  static const int KEY_K = 75;
  static const int KEY_L = 76;
  static const int KEY_M = 77;
  static const int KEY_N = 78;
  static const int KEY_O = 79;
  static const int KEY_P = 80;
  static const int KEY_Q = 81;
  static const int KEY_R = 82;
  static const int KEY_S = 83;
  static const int KEY_T = 84;
  static const int KEY_U = 85;
  static const int KEY_V = 86;
  static const int KEY_W = 87;
  static const int KEY_X = 88;
  static const int KEY_Y = 89;
  static const int KEY_Z = 90;
  static const int KEY_LEFT_BRACKET = 91;
  static const int KEY_BACKSLASH = 92;
  static const int KEY_RIGHT_BRACKET = 93;
  static const int KEY_GRAVE = 96;
  static const int KEY_SPACE = 32;
  static const int KEY_ESCAPE = 256;
  static const int KEY_ENTER = 257;
  static const int KEY_TAB = 258;
  static const int KEY_BACKSPACE = 259;
  static const int KEY_INSERT = 260;
  static const int KEY_DELETE = 261;
  static const int KEY_RIGHT = 262;
  static const int KEY_LEFT = 263;
  static const int KEY_DOWN = 264;
  static const int KEY_UP = 265;
  static const int KEY_PAGE_UP = 266;
  static const int KEY_PAGE_DOWN = 267;
  static const int KEY_HOME = 268;
  static const int KEY_END = 269;
  static const int KEY_CAPS_LOCK = 280;
  static const int KEY_SCROLL_LOCK = 281;
  static const int KEY_NUM_LOCK = 282;
  static const int KEY_PRINT_SCREEN = 283;
  static const int KEY_PAUSE = 284;
  static const int KEY_F1 = 290;
  static const int KEY_F2 = 291;
  static const int KEY_F3 = 292;
  static const int KEY_F4 = 293;
  static const int KEY_F5 = 294;
  static const int KEY_F6 = 295;
  static const int KEY_F7 = 296;
  static const int KEY_F8 = 297;
  static const int KEY_F9 = 298;
  static const int KEY_F10 = 299;
  static const int KEY_F11 = 300;
  static const int KEY_F12 = 301;
  static const int KEY_LEFT_SHIFT = 340;
  static const int KEY_LEFT_CONTROL = 341;
  static const int KEY_LEFT_ALT = 342;
  static const int KEY_LEFT_SUPER = 343;
  static const int KEY_RIGHT_SHIFT = 344;
  static const int KEY_RIGHT_CONTROL = 345;
  static const int KEY_RIGHT_ALT = 346;
  static const int KEY_RIGHT_SUPER = 347;
  static const int KEY_KB_MENU = 348;
  static const int KEY_KP_0 = 320;
  static const int KEY_KP_1 = 321;
  static const int KEY_KP_2 = 322;
  static const int KEY_KP_3 = 323;
  static const int KEY_KP_4 = 324;
  static const int KEY_KP_5 = 325;
  static const int KEY_KP_6 = 326;
  static const int KEY_KP_7 = 327;
  static const int KEY_KP_8 = 328;
  static const int KEY_KP_9 = 329;
  static const int KEY_KP_DECIMAL = 330;
  static const int KEY_KP_DIVIDE = 331;
  static const int KEY_KP_MULTIPLY = 332;
  static const int KEY_KP_SUBTRACT = 333;
  static const int KEY_KP_ADD = 334;
  static const int KEY_KP_ENTER = 335;
  static const int KEY_KP_EQUAL = 336;
  static const int KEY_BACK = 4;
  static const int KEY_MENU = 82;
  static const int KEY_VOLUME_UP = 24;
  static const int KEY_VOLUME_DOWN = 25;
}

abstract class MouseButton {
  static const int MOUSE_BUTTON_LEFT = 0;
  static const int MOUSE_BUTTON_RIGHT = 1;
  static const int MOUSE_BUTTON_MIDDLE = 2;
  static const int MOUSE_BUTTON_SIDE = 3;
  static const int MOUSE_BUTTON_EXTRA = 4;
  static const int MOUSE_BUTTON_FORWARD = 5;
  static const int MOUSE_BUTTON_BACK = 6;
}

abstract class MouseCursor {
  static const int MOUSE_CURSOR_DEFAULT = 0;
  static const int MOUSE_CURSOR_ARROW = 1;
  static const int MOUSE_CURSOR_IBEAM = 2;
  static const int MOUSE_CURSOR_CROSSHAIR = 3;
  static const int MOUSE_CURSOR_POINTING_HAND = 4;
  static const int MOUSE_CURSOR_RESIZE_EW = 5;
  static const int MOUSE_CURSOR_RESIZE_NS = 6;
  static const int MOUSE_CURSOR_RESIZE_NWSE = 7;
  static const int MOUSE_CURSOR_RESIZE_NESW = 8;
  static const int MOUSE_CURSOR_RESIZE_ALL = 9;
  static const int MOUSE_CURSOR_NOT_ALLOWED = 10;
}

abstract class GamepadButton {
  static const int GAMEPAD_BUTTON_UNKNOWN = 0;
  static const int GAMEPAD_BUTTON_LEFT_FACE_UP = 1;
  static const int GAMEPAD_BUTTON_LEFT_FACE_RIGHT = 2;
  static const int GAMEPAD_BUTTON_LEFT_FACE_DOWN = 3;
  static const int GAMEPAD_BUTTON_LEFT_FACE_LEFT = 4;
  static const int GAMEPAD_BUTTON_RIGHT_FACE_UP = 5;
  static const int GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = 6;
  static const int GAMEPAD_BUTTON_RIGHT_FACE_DOWN = 7;
  static const int GAMEPAD_BUTTON_RIGHT_FACE_LEFT = 8;
  static const int GAMEPAD_BUTTON_LEFT_TRIGGER_1 = 9;
  static const int GAMEPAD_BUTTON_LEFT_TRIGGER_2 = 10;
  static const int GAMEPAD_BUTTON_RIGHT_TRIGGER_1 = 11;
  static const int GAMEPAD_BUTTON_RIGHT_TRIGGER_2 = 12;
  static const int GAMEPAD_BUTTON_MIDDLE_LEFT = 13;
  static const int GAMEPAD_BUTTON_MIDDLE = 14;
  static const int GAMEPAD_BUTTON_MIDDLE_RIGHT = 15;
  static const int GAMEPAD_BUTTON_LEFT_THUMB = 16;
  static const int GAMEPAD_BUTTON_RIGHT_THUMB = 17;
}

abstract class GamepadAxis {
  static const int GAMEPAD_AXIS_LEFT_X = 0;
  static const int GAMEPAD_AXIS_LEFT_Y = 1;
  static const int GAMEPAD_AXIS_RIGHT_X = 2;
  static const int GAMEPAD_AXIS_RIGHT_Y = 3;
  static const int GAMEPAD_AXIS_LEFT_TRIGGER = 4;
  static const int GAMEPAD_AXIS_RIGHT_TRIGGER = 5;
}

abstract class MaterialMapIndex {
  static const int MATERIAL_MAP_ALBEDO = 0;
  static const int MATERIAL_MAP_METALNESS = 1;
  static const int MATERIAL_MAP_NORMAL = 2;
  static const int MATERIAL_MAP_ROUGHNESS = 3;
  static const int MATERIAL_MAP_OCCLUSION = 4;
  static const int MATERIAL_MAP_EMISSION = 5;
  static const int MATERIAL_MAP_HEIGHT = 6;
  static const int MATERIAL_MAP_CUBEMAP = 7;
  static const int MATERIAL_MAP_IRRADIANCE = 8;
  static const int MATERIAL_MAP_PREFILTER = 9;
  static const int MATERIAL_MAP_BRDF = 10;
}

abstract class ShaderLocationIndex {
  static const int SHADER_LOC_VERTEX_POSITION = 0;
  static const int SHADER_LOC_VERTEX_TEXCOORD01 = 1;
  static const int SHADER_LOC_VERTEX_TEXCOORD02 = 2;
  static const int SHADER_LOC_VERTEX_NORMAL = 3;
  static const int SHADER_LOC_VERTEX_TANGENT = 4;
  static const int SHADER_LOC_VERTEX_COLOR = 5;
  static const int SHADER_LOC_MATRIX_MVP = 6;
  static const int SHADER_LOC_MATRIX_VIEW = 7;
  static const int SHADER_LOC_MATRIX_PROJECTION = 8;
  static const int SHADER_LOC_MATRIX_MODEL = 9;
  static const int SHADER_LOC_MATRIX_NORMAL = 10;
  static const int SHADER_LOC_VECTOR_VIEW = 11;
  static const int SHADER_LOC_COLOR_DIFFUSE = 12;
  static const int SHADER_LOC_COLOR_SPECULAR = 13;
  static const int SHADER_LOC_COLOR_AMBIENT = 14;
  static const int SHADER_LOC_MAP_ALBEDO = 15;
  static const int SHADER_LOC_MAP_METALNESS = 16;
  static const int SHADER_LOC_MAP_NORMAL = 17;
  static const int SHADER_LOC_MAP_ROUGHNESS = 18;
  static const int SHADER_LOC_MAP_OCCLUSION = 19;
  static const int SHADER_LOC_MAP_EMISSION = 20;
  static const int SHADER_LOC_MAP_HEIGHT = 21;
  static const int SHADER_LOC_MAP_CUBEMAP = 22;
  static const int SHADER_LOC_MAP_IRRADIANCE = 23;
  static const int SHADER_LOC_MAP_PREFILTER = 24;
  static const int SHADER_LOC_MAP_BRDF = 25;
}

abstract class ShaderUniformDataType {
  static const int SHADER_UNIFORM_FLOAT = 0;
  static const int SHADER_UNIFORM_VEC2 = 1;
  static const int SHADER_UNIFORM_VEC3 = 2;
  static const int SHADER_UNIFORM_VEC4 = 3;
  static const int SHADER_UNIFORM_INT = 4;
  static const int SHADER_UNIFORM_IVEC2 = 5;
  static const int SHADER_UNIFORM_IVEC3 = 6;
  static const int SHADER_UNIFORM_IVEC4 = 7;
  static const int SHADER_UNIFORM_SAMPLER2D = 8;
}

abstract class ShaderAttributeDataType {
  static const int SHADER_ATTRIB_FLOAT = 0;
  static const int SHADER_ATTRIB_VEC2 = 1;
  static const int SHADER_ATTRIB_VEC3 = 2;
  static const int SHADER_ATTRIB_VEC4 = 3;
}

abstract class PixelFormat {
  static const int PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1;
  static const int PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA = 2;
  static const int PIXELFORMAT_UNCOMPRESSED_R5G6B5 = 3;
  static const int PIXELFORMAT_UNCOMPRESSED_R8G8B8 = 4;
  static const int PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 = 5;
  static const int PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 = 6;
  static const int PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 = 7;
  static const int PIXELFORMAT_UNCOMPRESSED_R32 = 8;
  static const int PIXELFORMAT_UNCOMPRESSED_R32G32B32 = 9;
  static const int PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 = 10;
  static const int PIXELFORMAT_UNCOMPRESSED_R16 = 11;
  static const int PIXELFORMAT_UNCOMPRESSED_R16G16B16 = 12;
  static const int PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 = 13;
  static const int PIXELFORMAT_COMPRESSED_DXT1_RGB = 14;
  static const int PIXELFORMAT_COMPRESSED_DXT1_RGBA = 15;
  static const int PIXELFORMAT_COMPRESSED_DXT3_RGBA = 16;
  static const int PIXELFORMAT_COMPRESSED_DXT5_RGBA = 17;
  static const int PIXELFORMAT_COMPRESSED_ETC1_RGB = 18;
  static const int PIXELFORMAT_COMPRESSED_ETC2_RGB = 19;
  static const int PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA = 20;
  static const int PIXELFORMAT_COMPRESSED_PVRT_RGB = 21;
  static const int PIXELFORMAT_COMPRESSED_PVRT_RGBA = 22;
  static const int PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA = 23;
  static const int PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA = 24;
}

abstract class TextureFilter {
  static const int TEXTURE_FILTER_POINT = 0;
  static const int TEXTURE_FILTER_BILINEAR = 1;
  static const int TEXTURE_FILTER_TRILINEAR = 2;
  static const int TEXTURE_FILTER_ANISOTROPIC_4X = 3;
  static const int TEXTURE_FILTER_ANISOTROPIC_8X = 4;
  static const int TEXTURE_FILTER_ANISOTROPIC_16X = 5;
}

abstract class TextureWrap {
  static const int TEXTURE_WRAP_REPEAT = 0;
  static const int TEXTURE_WRAP_CLAMP = 1;
  static const int TEXTURE_WRAP_MIRROR_REPEAT = 2;
  static const int TEXTURE_WRAP_MIRROR_CLAMP = 3;
}

abstract class CubemapLayout {
  static const int CUBEMAP_LAYOUT_AUTO_DETECT = 0;
  static const int CUBEMAP_LAYOUT_LINE_VERTICAL = 1;
  static const int CUBEMAP_LAYOUT_LINE_HORIZONTAL = 2;
  static const int CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR = 3;
  static const int CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE = 4;
  static const int CUBEMAP_LAYOUT_PANORAMA = 5;
}

abstract class FontType {
  static const int FONT_DEFAULT = 0;
  static const int FONT_BITMAP = 1;
  static const int FONT_SDF = 2;
}

abstract class BlendMode {
  static const int BLEND_ALPHA = 0;
  static const int BLEND_ADDITIVE = 1;
  static const int BLEND_MULTIPLIED = 2;
  static const int BLEND_ADD_COLORS = 3;
  static const int BLEND_SUBTRACT_COLORS = 4;
  static const int BLEND_ALPHA_PREMULTIPLY = 5;
  static const int BLEND_CUSTOM = 6;
  static const int BLEND_CUSTOM_SEPARATE = 7;
}

abstract class Gesture {
  static const int GESTURE_NONE = 0;
  static const int GESTURE_TAP = 1;
  static const int GESTURE_DOUBLETAP = 2;
  static const int GESTURE_HOLD = 4;
  static const int GESTURE_DRAG = 8;
  static const int GESTURE_SWIPE_RIGHT = 16;
  static const int GESTURE_SWIPE_LEFT = 32;
  static const int GESTURE_SWIPE_UP = 64;
  static const int GESTURE_SWIPE_DOWN = 128;
  static const int GESTURE_PINCH_IN = 256;
  static const int GESTURE_PINCH_OUT = 512;
}

abstract class CameraMode {
  static const int CAMERA_CUSTOM = 0;
  static const int CAMERA_FREE = 1;
  static const int CAMERA_ORBITAL = 2;
  static const int CAMERA_FIRST_PERSON = 3;
  static const int CAMERA_THIRD_PERSON = 4;
}

abstract class CameraProjection {
  static const int CAMERA_PERSPECTIVE = 0;
  static const int CAMERA_ORTHOGRAPHIC = 1;
}

abstract class NPatchLayout {
  static const int NPATCH_NINE_PATCH = 0;
  static const int NPATCH_THREE_PATCH_VERTICAL = 1;
  static const int NPATCH_THREE_PATCH_HORIZONTAL = 2;
}

typedef RenderTexture2D = RenderTexture;
typedef Camera = Camera3D;
typedef TraceLogCallback
    = ffi.Pointer<ffi.NativeFunction<TraceLogCallbackFunction>>;
typedef TraceLogCallbackFunction = ffi.Void Function(
    ffi.Int logLevel, ffi.Pointer<ffi.Char> text, va_list args);
typedef DartTraceLogCallbackFunction = void Function(
    int logLevel, ffi.Pointer<ffi.Char> text, va_list args);
typedef LoadFileDataCallback
    = ffi.Pointer<ffi.NativeFunction<LoadFileDataCallbackFunction>>;
typedef LoadFileDataCallbackFunction = ffi.Pointer<ffi.UnsignedChar> Function(
    ffi.Pointer<ffi.Char> fileName, ffi.Pointer<ffi.Int> dataSize);
typedef SaveFileDataCallback
    = ffi.Pointer<ffi.NativeFunction<SaveFileDataCallbackFunction>>;
typedef SaveFileDataCallbackFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Void> data,
    ffi.Int dataSize);
typedef DartSaveFileDataCallbackFunction = bool Function(
    ffi.Pointer<ffi.Char> fileName, ffi.Pointer<ffi.Void> data, int dataSize);
typedef LoadFileTextCallback
    = ffi.Pointer<ffi.NativeFunction<LoadFileTextCallbackFunction>>;
typedef LoadFileTextCallbackFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> fileName);
typedef SaveFileTextCallback
    = ffi.Pointer<ffi.NativeFunction<SaveFileTextCallbackFunction>>;
typedef SaveFileTextCallbackFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Char> fileName, ffi.Pointer<ffi.Char> text);
typedef DartSaveFileTextCallbackFunction = bool Function(
    ffi.Pointer<ffi.Char> fileName, ffi.Pointer<ffi.Char> text);
typedef TextureCubemap = Texture;
typedef AudioCallback = ffi.Pointer<ffi.NativeFunction<AudioCallbackFunction>>;
typedef AudioCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> bufferData, ffi.UnsignedInt frames);
typedef DartAudioCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> bufferData, int frames);

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int RAYLIB_VERSION_MAJOR = 5;

const int RAYLIB_VERSION_MINOR = 1;

const int RAYLIB_VERSION_PATCH = 0;

const String RAYLIB_VERSION = '5.1-dev';

const double PI = 3.1415927410125732;

const double DEG2RAD = 0.01745329238474369;

const double RAD2DEG = 57.2957763671875;

const int __bool_true_false_are_defined = 1;

const int false1 = 0;

const int true1 = 1;

const int MOUSE_LEFT_BUTTON = 0;

const int MOUSE_RIGHT_BUTTON = 1;

const int MOUSE_MIDDLE_BUTTON = 2;

const int MATERIAL_MAP_DIFFUSE = 0;

const int MATERIAL_MAP_SPECULAR = 1;

const int SHADER_LOC_MAP_DIFFUSE = 15;

const int SHADER_LOC_MAP_SPECULAR = 16;
